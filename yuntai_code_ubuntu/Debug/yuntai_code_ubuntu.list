
yuntai_code_ubuntu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058bc  080058bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c4  080058c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  2000000c  080058d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  080058d8  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d4a  00000000  00000000  000479f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0004b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  0004c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002666c  00000000  00000000  0004d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001636d  00000000  00000000  00073b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db32b  00000000  00000000  00089ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001651f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f90  00000000  00000000  00165248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005884 	.word	0x08005884

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005884 	.word	0x08005884

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2f>:
 80007b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c0:	bf24      	itt	cs
 80007c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ca:	d90d      	bls.n	80007e8 <__aeabi_d2f+0x30>
 80007cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e0:	bf08      	it	eq
 80007e2:	f020 0001 	biceq.w	r0, r0, #1
 80007e6:	4770      	bx	lr
 80007e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007ec:	d121      	bne.n	8000832 <__aeabi_d2f+0x7a>
 80007ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f2:	bfbc      	itt	lt
 80007f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f8:	4770      	bxlt	lr
 80007fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000802:	f1c2 0218 	rsb	r2, r2, #24
 8000806:	f1c2 0c20 	rsb	ip, r2, #32
 800080a:	fa10 f30c 	lsls.w	r3, r0, ip
 800080e:	fa20 f002 	lsr.w	r0, r0, r2
 8000812:	bf18      	it	ne
 8000814:	f040 0001 	orrne.w	r0, r0, #1
 8000818:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800081c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000820:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000824:	ea40 000c 	orr.w	r0, r0, ip
 8000828:	fa23 f302 	lsr.w	r3, r3, r2
 800082c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000830:	e7cc      	b.n	80007cc <__aeabi_d2f+0x14>
 8000832:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000836:	d107      	bne.n	8000848 <__aeabi_d2f+0x90>
 8000838:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800083c:	bf1e      	ittt	ne
 800083e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000842:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000846:	4770      	bxne	lr
 8000848:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800084c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000850:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <__aeabi_uldivmod>:
 8000858:	b953      	cbnz	r3, 8000870 <__aeabi_uldivmod+0x18>
 800085a:	b94a      	cbnz	r2, 8000870 <__aeabi_uldivmod+0x18>
 800085c:	2900      	cmp	r1, #0
 800085e:	bf08      	it	eq
 8000860:	2800      	cmpeq	r0, #0
 8000862:	bf1c      	itt	ne
 8000864:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000868:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800086c:	f000 b96e 	b.w	8000b4c <__aeabi_idiv0>
 8000870:	f1ad 0c08 	sub.w	ip, sp, #8
 8000874:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000878:	f000 f806 	bl	8000888 <__udivmoddi4>
 800087c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000884:	b004      	add	sp, #16
 8000886:	4770      	bx	lr

08000888 <__udivmoddi4>:
 8000888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800088c:	9d08      	ldr	r5, [sp, #32]
 800088e:	4604      	mov	r4, r0
 8000890:	468c      	mov	ip, r1
 8000892:	2b00      	cmp	r3, #0
 8000894:	f040 8083 	bne.w	800099e <__udivmoddi4+0x116>
 8000898:	428a      	cmp	r2, r1
 800089a:	4617      	mov	r7, r2
 800089c:	d947      	bls.n	800092e <__udivmoddi4+0xa6>
 800089e:	fab2 f282 	clz	r2, r2
 80008a2:	b142      	cbz	r2, 80008b6 <__udivmoddi4+0x2e>
 80008a4:	f1c2 0020 	rsb	r0, r2, #32
 80008a8:	fa24 f000 	lsr.w	r0, r4, r0
 80008ac:	4091      	lsls	r1, r2
 80008ae:	4097      	lsls	r7, r2
 80008b0:	ea40 0c01 	orr.w	ip, r0, r1
 80008b4:	4094      	lsls	r4, r2
 80008b6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ba:	0c23      	lsrs	r3, r4, #16
 80008bc:	fbbc f6f8 	udiv	r6, ip, r8
 80008c0:	fa1f fe87 	uxth.w	lr, r7
 80008c4:	fb08 c116 	mls	r1, r8, r6, ip
 80008c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008cc:	fb06 f10e 	mul.w	r1, r6, lr
 80008d0:	4299      	cmp	r1, r3
 80008d2:	d909      	bls.n	80008e8 <__udivmoddi4+0x60>
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008da:	f080 8119 	bcs.w	8000b10 <__udivmoddi4+0x288>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 8116 	bls.w	8000b10 <__udivmoddi4+0x288>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	443b      	add	r3, r7
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	d909      	bls.n	8000914 <__udivmoddi4+0x8c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000906:	f080 8105 	bcs.w	8000b14 <__udivmoddi4+0x28c>
 800090a:	45a6      	cmp	lr, r4
 800090c:	f240 8102 	bls.w	8000b14 <__udivmoddi4+0x28c>
 8000910:	3802      	subs	r0, #2
 8000912:	443c      	add	r4, r7
 8000914:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000918:	eba4 040e 	sub.w	r4, r4, lr
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa0>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	b902      	cbnz	r2, 8000932 <__udivmoddi4+0xaa>
 8000930:	deff      	udf	#255	; 0xff
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	2a00      	cmp	r2, #0
 8000938:	d150      	bne.n	80009dc <__udivmoddi4+0x154>
 800093a:	1bcb      	subs	r3, r1, r7
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	fa1f f887 	uxth.w	r8, r7
 8000944:	2601      	movs	r6, #1
 8000946:	fbb3 fcfe 	udiv	ip, r3, lr
 800094a:	0c21      	lsrs	r1, r4, #16
 800094c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000950:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000954:	fb08 f30c 	mul.w	r3, r8, ip
 8000958:	428b      	cmp	r3, r1
 800095a:	d907      	bls.n	800096c <__udivmoddi4+0xe4>
 800095c:	1879      	adds	r1, r7, r1
 800095e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000962:	d202      	bcs.n	800096a <__udivmoddi4+0xe2>
 8000964:	428b      	cmp	r3, r1
 8000966:	f200 80e9 	bhi.w	8000b3c <__udivmoddi4+0x2b4>
 800096a:	4684      	mov	ip, r0
 800096c:	1ac9      	subs	r1, r1, r3
 800096e:	b2a3      	uxth	r3, r4
 8000970:	fbb1 f0fe 	udiv	r0, r1, lr
 8000974:	fb0e 1110 	mls	r1, lr, r0, r1
 8000978:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800097c:	fb08 f800 	mul.w	r8, r8, r0
 8000980:	45a0      	cmp	r8, r4
 8000982:	d907      	bls.n	8000994 <__udivmoddi4+0x10c>
 8000984:	193c      	adds	r4, r7, r4
 8000986:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800098a:	d202      	bcs.n	8000992 <__udivmoddi4+0x10a>
 800098c:	45a0      	cmp	r8, r4
 800098e:	f200 80d9 	bhi.w	8000b44 <__udivmoddi4+0x2bc>
 8000992:	4618      	mov	r0, r3
 8000994:	eba4 0408 	sub.w	r4, r4, r8
 8000998:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800099c:	e7bf      	b.n	800091e <__udivmoddi4+0x96>
 800099e:	428b      	cmp	r3, r1
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0x12e>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	f000 80b1 	beq.w	8000b0a <__udivmoddi4+0x282>
 80009a8:	2600      	movs	r6, #0
 80009aa:	e9c5 0100 	strd	r0, r1, [r5]
 80009ae:	4630      	mov	r0, r6
 80009b0:	4631      	mov	r1, r6
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	fab3 f683 	clz	r6, r3
 80009ba:	2e00      	cmp	r6, #0
 80009bc:	d14a      	bne.n	8000a54 <__udivmoddi4+0x1cc>
 80009be:	428b      	cmp	r3, r1
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0x140>
 80009c2:	4282      	cmp	r2, r0
 80009c4:	f200 80b8 	bhi.w	8000b38 <__udivmoddi4+0x2b0>
 80009c8:	1a84      	subs	r4, r0, r2
 80009ca:	eb61 0103 	sbc.w	r1, r1, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	468c      	mov	ip, r1
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d0a8      	beq.n	8000928 <__udivmoddi4+0xa0>
 80009d6:	e9c5 4c00 	strd	r4, ip, [r5]
 80009da:	e7a5      	b.n	8000928 <__udivmoddi4+0xa0>
 80009dc:	f1c2 0320 	rsb	r3, r2, #32
 80009e0:	fa20 f603 	lsr.w	r6, r0, r3
 80009e4:	4097      	lsls	r7, r2
 80009e6:	fa01 f002 	lsl.w	r0, r1, r2
 80009ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ee:	40d9      	lsrs	r1, r3
 80009f0:	4330      	orrs	r0, r6
 80009f2:	0c03      	lsrs	r3, r0, #16
 80009f4:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f8:	fa1f f887 	uxth.w	r8, r7
 80009fc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a04:	fb06 f108 	mul.w	r1, r6, r8
 8000a08:	4299      	cmp	r1, r3
 8000a0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0e:	d909      	bls.n	8000a24 <__udivmoddi4+0x19c>
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000a16:	f080 808d 	bcs.w	8000b34 <__udivmoddi4+0x2ac>
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	f240 808a 	bls.w	8000b34 <__udivmoddi4+0x2ac>
 8000a20:	3e02      	subs	r6, #2
 8000a22:	443b      	add	r3, r7
 8000a24:	1a5b      	subs	r3, r3, r1
 8000a26:	b281      	uxth	r1, r0
 8000a28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a34:	fb00 f308 	mul.w	r3, r0, r8
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d907      	bls.n	8000a4c <__udivmoddi4+0x1c4>
 8000a3c:	1879      	adds	r1, r7, r1
 8000a3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a42:	d273      	bcs.n	8000b2c <__udivmoddi4+0x2a4>
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d971      	bls.n	8000b2c <__udivmoddi4+0x2a4>
 8000a48:	3802      	subs	r0, #2
 8000a4a:	4439      	add	r1, r7
 8000a4c:	1acb      	subs	r3, r1, r3
 8000a4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a52:	e778      	b.n	8000946 <__udivmoddi4+0xbe>
 8000a54:	f1c6 0c20 	rsb	ip, r6, #32
 8000a58:	fa03 f406 	lsl.w	r4, r3, r6
 8000a5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a60:	431c      	orrs	r4, r3
 8000a62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a66:	fa01 f306 	lsl.w	r3, r1, r6
 8000a6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a72:	431f      	orrs	r7, r3
 8000a74:	0c3b      	lsrs	r3, r7, #16
 8000a76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a7a:	fa1f f884 	uxth.w	r8, r4
 8000a7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a86:	fb09 fa08 	mul.w	sl, r9, r8
 8000a8a:	458a      	cmp	sl, r1
 8000a8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000a90:	fa00 f306 	lsl.w	r3, r0, r6
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x220>
 8000a96:	1861      	adds	r1, r4, r1
 8000a98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a9c:	d248      	bcs.n	8000b30 <__udivmoddi4+0x2a8>
 8000a9e:	458a      	cmp	sl, r1
 8000aa0:	d946      	bls.n	8000b30 <__udivmoddi4+0x2a8>
 8000aa2:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa6:	4421      	add	r1, r4
 8000aa8:	eba1 010a 	sub.w	r1, r1, sl
 8000aac:	b2bf      	uxth	r7, r7
 8000aae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aba:	fb00 f808 	mul.w	r8, r0, r8
 8000abe:	45b8      	cmp	r8, r7
 8000ac0:	d907      	bls.n	8000ad2 <__udivmoddi4+0x24a>
 8000ac2:	19e7      	adds	r7, r4, r7
 8000ac4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ac8:	d22e      	bcs.n	8000b28 <__udivmoddi4+0x2a0>
 8000aca:	45b8      	cmp	r8, r7
 8000acc:	d92c      	bls.n	8000b28 <__udivmoddi4+0x2a0>
 8000ace:	3802      	subs	r0, #2
 8000ad0:	4427      	add	r7, r4
 8000ad2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad6:	eba7 0708 	sub.w	r7, r7, r8
 8000ada:	fba0 8902 	umull	r8, r9, r0, r2
 8000ade:	454f      	cmp	r7, r9
 8000ae0:	46c6      	mov	lr, r8
 8000ae2:	4649      	mov	r1, r9
 8000ae4:	d31a      	bcc.n	8000b1c <__udivmoddi4+0x294>
 8000ae6:	d017      	beq.n	8000b18 <__udivmoddi4+0x290>
 8000ae8:	b15d      	cbz	r5, 8000b02 <__udivmoddi4+0x27a>
 8000aea:	ebb3 020e 	subs.w	r2, r3, lr
 8000aee:	eb67 0701 	sbc.w	r7, r7, r1
 8000af2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af6:	40f2      	lsrs	r2, r6
 8000af8:	ea4c 0202 	orr.w	r2, ip, r2
 8000afc:	40f7      	lsrs	r7, r6
 8000afe:	e9c5 2700 	strd	r2, r7, [r5]
 8000b02:	2600      	movs	r6, #0
 8000b04:	4631      	mov	r1, r6
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	462e      	mov	r6, r5
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	e70b      	b.n	8000928 <__udivmoddi4+0xa0>
 8000b10:	4606      	mov	r6, r0
 8000b12:	e6e9      	b.n	80008e8 <__udivmoddi4+0x60>
 8000b14:	4618      	mov	r0, r3
 8000b16:	e6fd      	b.n	8000914 <__udivmoddi4+0x8c>
 8000b18:	4543      	cmp	r3, r8
 8000b1a:	d2e5      	bcs.n	8000ae8 <__udivmoddi4+0x260>
 8000b1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b20:	eb69 0104 	sbc.w	r1, r9, r4
 8000b24:	3801      	subs	r0, #1
 8000b26:	e7df      	b.n	8000ae8 <__udivmoddi4+0x260>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	e7d2      	b.n	8000ad2 <__udivmoddi4+0x24a>
 8000b2c:	4660      	mov	r0, ip
 8000b2e:	e78d      	b.n	8000a4c <__udivmoddi4+0x1c4>
 8000b30:	4681      	mov	r9, r0
 8000b32:	e7b9      	b.n	8000aa8 <__udivmoddi4+0x220>
 8000b34:	4666      	mov	r6, ip
 8000b36:	e775      	b.n	8000a24 <__udivmoddi4+0x19c>
 8000b38:	4630      	mov	r0, r6
 8000b3a:	e74a      	b.n	80009d2 <__udivmoddi4+0x14a>
 8000b3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b40:	4439      	add	r1, r7
 8000b42:	e713      	b.n	800096c <__udivmoddi4+0xe4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	e724      	b.n	8000994 <__udivmoddi4+0x10c>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_idiv0>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <GM6020_Init>:

GM6020_t h6020s[7];
float posRef = 60.0f;

void GM6020_Init(void) 
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
	for(int i =0; i<7; i++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	e06c      	b.n	8000c36 <GM6020_Init+0xe6>
	 {

		h6020s[i].speedPID.KP = 15;
 8000b5c:	493b      	ldr	r1, [pc, #236]	; (8000c4c <GM6020_Init+0xfc>)
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	015b      	lsls	r3, r3, #5
 8000b64:	4413      	add	r3, r2
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	440b      	add	r3, r1
 8000b6a:	3334      	adds	r3, #52	; 0x34
 8000b6c:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <GM6020_Init+0x100>)
 8000b6e:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.KI = 1;
 8000b70:	4936      	ldr	r1, [pc, #216]	; (8000c4c <GM6020_Init+0xfc>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4613      	mov	r3, r2
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	4413      	add	r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3338      	adds	r3, #56	; 0x38
 8000b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b84:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.KD = 1;
 8000b86:	4931      	ldr	r1, [pc, #196]	; (8000c4c <GM6020_Init+0xfc>)
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	015b      	lsls	r3, r3, #5
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	333c      	adds	r3, #60	; 0x3c
 8000b96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b9a:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.outputMax = 20000;
 8000b9c:	492b      	ldr	r1, [pc, #172]	; (8000c4c <GM6020_Init+0xfc>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	015b      	lsls	r3, r3, #5
 8000ba4:	4413      	add	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	440b      	add	r3, r1
 8000baa:	3358      	adds	r3, #88	; 0x58
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <GM6020_Init+0x104>)
 8000bae:	601a      	str	r2, [r3, #0]

        h6020s[i].posPID.KP = 20.0f;
 8000bb0:	4926      	ldr	r1, [pc, #152]	; (8000c4c <GM6020_Init+0xfc>)
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	015b      	lsls	r3, r3, #5
 8000bb8:	4413      	add	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	335c      	adds	r3, #92	; 0x5c
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <GM6020_Init+0x108>)
 8000bc2:	601a      	str	r2, [r3, #0]
        //h6020s[i].posPID.KP = 50.0f;
        h6020s[i].posPID.KI = 0;
 8000bc4:	4921      	ldr	r1, [pc, #132]	; (8000c4c <GM6020_Init+0xfc>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4413      	add	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	3360      	adds	r3, #96	; 0x60
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
        h6020s[i].posPID.KD =0;
 8000bda:	491c      	ldr	r1, [pc, #112]	; (8000c4c <GM6020_Init+0xfc>)
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	4413      	add	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	440b      	add	r3, r1
 8000be8:	3364      	adds	r3, #100	; 0x64
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
        h6020s[i].posPID.outputMax = 1500;
 8000bf0:	4916      	ldr	r1, [pc, #88]	; (8000c4c <GM6020_Init+0xfc>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	015b      	lsls	r3, r3, #5
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	3380      	adds	r3, #128	; 0x80
 8000c00:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <GM6020_Init+0x10c>)
 8000c02:	601a      	str	r2, [r3, #0]

		h6020s[i].reductionRate = 1.0f;
 8000c04:	4911      	ldr	r1, [pc, #68]	; (8000c4c <GM6020_Init+0xfc>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	440b      	add	r3, r1
 8000c12:	332c      	adds	r3, #44	; 0x2c
 8000c14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c18:	601a      	str	r2, [r3, #0]
		h6020s[i].encoder_resolution = 8192.0f;
 8000c1a:	490c      	ldr	r1, [pc, #48]	; (8000c4c <GM6020_Init+0xfc>)
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	015b      	lsls	r3, r3, #5
 8000c22:	4413      	add	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	3330      	adds	r3, #48	; 0x30
 8000c2a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000c2e:	601a      	str	r2, [r3, #0]
	for(int i =0; i<7; i++)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	dd8f      	ble.n	8000b5c <GM6020_Init+0xc>

	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000030 	.word	0x20000030
 8000c50:	41700000 	.word	0x41700000
 8000c54:	469c4000 	.word	0x469c4000
 8000c58:	41a00000 	.word	0x41a00000
 8000c5c:	44bb8000 	.word	0x44bb8000

08000c60 <P_Calc>:

static uint32_t TxMailbox;

void P_Calc(PID_t *pid){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	pid->cur_error = pid->ref - pid->fdb;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->output = pid->KP * pid->cur_error;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	ed93 7a00 	vldr	s14, [r3]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	edc3 7a08 	vstr	s15, [r3, #32]
	/*设定输出上限*/
	if(pid->output > pid->outputMax) pid->output = pid->outputMax;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca8:	dd03      	ble.n	8000cb2 <P_Calc+0x52>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	621a      	str	r2, [r3, #32]
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	ed93 7a08 	vldr	s14, [r3, #32]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cbe:	eef1 7a67 	vneg.f32	s15, s15
 8000cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d400      	bmi.n	8000cce <P_Calc+0x6e>

}
 8000ccc:	e007      	b.n	8000cde <P_Calc+0x7e>
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cd4:	eef1 7a67 	vneg.f32	s15, s15
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PID_Calc>:

void PID_Calc(PID_t *pid)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	pid->cur_error = pid->ref - pid->fdb;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	ed93 7a04 	vldr	s14, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->output += pid->KP * (pid->cur_error - pid->error[1]) + pid->KI * pid->cur_error + pid->KD * (pid->cur_error - 2 * pid->error[1] + pid->error[0]);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edd3 6a00 	vldr	s13, [r3]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	ed93 6a05 	vldr	s12, [r3, #20]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000d24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	ed93 6a01 	vldr	s12, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	ed93 6a02 	vldr	s12, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	edd3 5a05 	vldr	s11, [r3, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d52:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d5c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000d60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->error[0] = pid->error[1];
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69da      	ldr	r2, [r3, #28]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	619a      	str	r2, [r3, #24]
	pid->error[1] = pid->ref - pid->fdb;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	edc3 7a07 	vstr	s15, [r3, #28]
	/*设定输出上限*/
	if(pid->output > pid->outputMax) pid->output = pid->outputMax;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	dd03      	ble.n	8000dae <PID_Calc+0xc4>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	621a      	str	r2, [r3, #32]
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000dba:	eef1 7a67 	vneg.f32	s15, s15
 8000dbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	d400      	bmi.n	8000dca <PID_Calc+0xe0>

}
 8000dc8:	e007      	b.n	8000dda <PID_Calc+0xf0>
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000dd0:	eef1 7a67 	vneg.f32	s15, s15
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <CanTransmit_GM6020_1234>:

void CanTransmit_GM6020_1234(CAN_HandleTypeDef *hcanx, int16_t cm1_iq, int16_t cm2_iq, int16_t cm3_iq, int16_t cm4_iq){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	817b      	strh	r3, [r7, #10]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	813b      	strh	r3, [r7, #8]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxMessage;
		
	TxMessage.DLC=0x08;
 8000e02:	2308      	movs	r3, #8
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.StdId=0x1FF;
 8000e06:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000e0a:	61bb      	str	r3, [r7, #24]
	TxMessage.IDE=CAN_ID_STD;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
	TxMessage.RTR=CAN_RTR_DATA;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t TxData[8];
	TxData[0] = (uint8_t)(cm1_iq >> 8);
 8000e14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e18:	121b      	asrs	r3, r3, #8
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	743b      	strb	r3, [r7, #16]
	TxData[1] = (uint8_t)cm1_iq;
 8000e20:	897b      	ldrh	r3, [r7, #10]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	747b      	strb	r3, [r7, #17]
	TxData[2] = (uint8_t)(cm2_iq >> 8);
 8000e26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e2a:	121b      	asrs	r3, r3, #8
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	74bb      	strb	r3, [r7, #18]
	TxData[3] = (uint8_t)cm2_iq;
 8000e32:	893b      	ldrh	r3, [r7, #8]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	74fb      	strb	r3, [r7, #19]
	TxData[4] = (uint8_t)(cm3_iq >> 8);
 8000e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3c:	121b      	asrs	r3, r3, #8
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	753b      	strb	r3, [r7, #20]
	TxData[5] = (uint8_t)cm3_iq;
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	757b      	strb	r3, [r7, #21]
	TxData[6] = (uint8_t)(cm4_iq >> 8);
 8000e4a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8000e4e:	121b      	asrs	r3, r3, #8
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	75bb      	strb	r3, [r7, #22]
	TxData[7] = (uint8_t)cm4_iq;
 8000e56:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	75fb      	strb	r3, [r7, #23]

	
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0) ;
 8000e5c:	bf00      	nop
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f001 fd6d 	bl	800293e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f9      	beq.n	8000e5e <CanTransmit_GM6020_1234+0x76>
	if(HAL_CAN_AddTxMessage(hcanx,&TxMessage,TxData,&TxMailbox)!=HAL_OK)
 8000e6a:	f107 0210 	add.w	r2, r7, #16
 8000e6e:	f107 0118 	add.w	r1, r7, #24
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <CanTransmit_GM6020_1234+0xa4>)
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f001 fc87 	bl	8002788 <HAL_CAN_AddTxMessage>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <CanTransmit_GM6020_1234+0x9c>
	{
		 Error_Handler();       //如果CAN信息发送失败则进入死循环
 8000e80:	f000 fd50 	bl	8001924 <Error_Handler>
	}
}
 8000e84:	bf00      	nop
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000028 	.word	0x20000028

08000e90 <get_dji_offset>:
    if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, TxData, &TxMailbox) != HAL_OK) {
        Error_Handler();       //如果CAN信息发送失败则进入死循环
    }
}

void get_dji_offset(GM6020_t *motor, uint8_t* fdbData){
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	motor->FdbData.RotorAngle_0_360 = (fdbData[0]<<8|fdbData[1])*360.0f/motor->encoder_resolution;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	3201      	adds	r2, #1
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	ee07 3a90 	vmov	s15, r3
 8000eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000eec <get_dji_offset+0x5c>
 8000eb4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->Calculate.RotorAngle_0_360_Log[1] = motor->FdbData.RotorAngle_0_360; 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
	motor->Calculate.RotorAngle_0_360_Log[NOW] = motor->Calculate.RotorAngle_0_360_Log[LAST];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]

	motor->Calculate.RotorAngle_0_360_OffSet = motor->FdbData.RotorAngle_0_360;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	61da      	str	r2, [r3, #28]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	43b40000 	.word	0x43b40000

08000ef0 <GM6020_CanMsgDecode>:


HAL_StatusTypeDef GM6020_CanMsgDecode(uint32_t stdid,uint8_t *fdbData) 
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
    int id =stdid-0x205;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8000f00:	60fb      	str	r3, [r7, #12]
    if( id>=0 && id<7 ){
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db2f      	blt.n	8000f68 <GM6020_CanMsgDecode+0x78>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	dc2c      	bgt.n	8000f68 <GM6020_CanMsgDecode+0x78>
        // GM6020_Update(id, fdbData);
		
		if(h6020s[id].FdbData.msg_cnt<50)
 8000f0e:	4919      	ldr	r1, [pc, #100]	; (8000f74 <GM6020_CanMsgDecode+0x84>)
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4613      	mov	r3, r2
 8000f14:	015b      	lsls	r3, r3, #5
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b31      	cmp	r3, #49	; 0x31
 8000f20:	dc1c      	bgt.n	8000f5c <GM6020_CanMsgDecode+0x6c>
		{
			get_dji_offset(&h6020s[id], fdbData);
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4613      	mov	r3, r2
 8000f26:	015b      	lsls	r3, r3, #5
 8000f28:	4413      	add	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <GM6020_CanMsgDecode+0x84>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	6839      	ldr	r1, [r7, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffac 	bl	8000e90 <get_dji_offset>
			h6020s[id].FdbData.msg_cnt++;
 8000f38:	490e      	ldr	r1, [pc, #56]	; (8000f74 <GM6020_CanMsgDecode+0x84>)
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1c59      	adds	r1, r3, #1
 8000f4a:	480a      	ldr	r0, [pc, #40]	; (8000f74 <GM6020_CanMsgDecode+0x84>)
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	015b      	lsls	r3, r3, #5
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4403      	add	r3, r0
 8000f58:	6019      	str	r1, [r3, #0]
 8000f5a:	e003      	b.n	8000f64 <GM6020_CanMsgDecode+0x74>
		}
		else
		{
			GM6020_Update(id, fdbData);
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f000 f80a 	bl	8000f78 <GM6020_Update>
		}
        return HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	e000      	b.n	8000f6a <GM6020_CanMsgDecode+0x7a>
    }

    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000030 	.word	0x20000030

08000f78 <GM6020_Update>:

void GM6020_Update(int id, uint8_t *fdbData) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	//static int last_tick[7];
	//static int ave_cnt[7];
	/*  反馈信息计算  */
	h6020s[id].FdbData.RotorAngle_0_360 = (fdbData[0] << 8 | fdbData[1]) * 360.0f
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	3201      	adds	r2, #1
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f98:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80012b4 <GM6020_Update+0x33c>
 8000f9c:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ h6020s[id].encoder_resolution; /* unit:degree*/
 8000fa0:	49c5      	ldr	r1, [pc, #788]	; (80012b8 <GM6020_Update+0x340>)
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	015b      	lsls	r3, r3, #5
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	3330      	adds	r3, #48	; 0x30
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	h6020s[id].FdbData.RotorAngle_0_360 = (fdbData[0] << 8 | fdbData[1]) * 360.0f
 8000fb8:	49bf      	ldr	r1, [pc, #764]	; (80012b8 <GM6020_Update+0x340>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	edc3 7a00 	vstr	s15, [r3]
    h6020s[id].FdbData.rpm = (int16_t)(fdbData[2] << 8 | fdbData[3]);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3303      	adds	r3, #3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fea:	49b3      	ldr	r1, [pc, #716]	; (80012b8 <GM6020_Update+0x340>)
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	015b      	lsls	r3, r3, #5
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
    h6020s[id].FdbData.current = (fdbData[4] << 8 | fdbData[5]);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3304      	adds	r3, #4
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	3205      	adds	r2, #5
 800100a:	7812      	ldrb	r2, [r2, #0]
 800100c:	4313      	orrs	r3, r2
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001016:	49a8      	ldr	r1, [pc, #672]	; (80012b8 <GM6020_Update+0x340>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4613      	mov	r3, r2
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	4413      	add	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	330c      	adds	r3, #12
 8001026:	edc3 7a00 	vstr	s15, [r3]

	/*  更新反馈速度/位置  */
	h6020s[id].Calculate.RotorAngle_0_360_Log[LAST]  =   h6020s[id].Calculate.RotorAngle_0_360_Log[NOW];
 800102a:	49a3      	ldr	r1, [pc, #652]	; (80012b8 <GM6020_Update+0x340>)
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3318      	adds	r3, #24
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	489e      	ldr	r0, [pc, #632]	; (80012b8 <GM6020_Update+0x340>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4403      	add	r3, r0
 800104a:	3314      	adds	r3, #20
 800104c:	6019      	str	r1, [r3, #0]
	h6020s[id].Calculate.RotorAngle_0_360_Log[NOW]   =   h6020s[id].FdbData.RotorAngle_0_360;
 800104e:	499a      	ldr	r1, [pc, #616]	; (80012b8 <GM6020_Update+0x340>)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	015b      	lsls	r3, r3, #5
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	4895      	ldr	r0, [pc, #596]	; (80012b8 <GM6020_Update+0x340>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	015b      	lsls	r3, r3, #5
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4403      	add	r3, r0
 800106e:	3318      	adds	r3, #24
 8001070:	6019      	str	r1, [r3, #0]
	
	/* 电机圈数更新        */
	if(h6020s[id].Calculate.RotorAngle_0_360_Log[NOW] -  h6020s[id].Calculate.RotorAngle_0_360_Log[LAST] > (180.0))
 8001072:	4991      	ldr	r1, [pc, #580]	; (80012b8 <GM6020_Update+0x340>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	3318      	adds	r3, #24
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	498c      	ldr	r1, [pc, #560]	; (80012b8 <GM6020_Update+0x340>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	015b      	lsls	r3, r3, #5
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3314      	adds	r3, #20
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800109e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80012bc <GM6020_Update+0x344>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd13      	ble.n	80010d4 <GM6020_Update+0x15c>
		h6020s[id].Calculate.RotorRound--;
 80010ac:	4982      	ldr	r1, [pc, #520]	; (80012b8 <GM6020_Update+0x340>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3320      	adds	r3, #32
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	487d      	ldr	r0, [pc, #500]	; (80012b8 <GM6020_Update+0x340>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	015b      	lsls	r3, r3, #5
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4403      	add	r3, r0
 80010ce:	3320      	adds	r3, #32
 80010d0:	6019      	str	r1, [r3, #0]
 80010d2:	e02f      	b.n	8001134 <GM6020_Update+0x1bc>
	else if(h6020s[id].Calculate.RotorAngle_0_360_Log[NOW] - h6020s[id].Calculate.RotorAngle_0_360_Log[LAST] < -(180.0))
 80010d4:	4978      	ldr	r1, [pc, #480]	; (80012b8 <GM6020_Update+0x340>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	015b      	lsls	r3, r3, #5
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3318      	adds	r3, #24
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	4973      	ldr	r1, [pc, #460]	; (80012b8 <GM6020_Update+0x340>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3314      	adds	r3, #20
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001100:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80012c0 <GM6020_Update+0x348>
 8001104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d512      	bpl.n	8001134 <GM6020_Update+0x1bc>
		h6020s[id].Calculate.RotorRound++;
 800110e:	496a      	ldr	r1, [pc, #424]	; (80012b8 <GM6020_Update+0x340>)
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	3320      	adds	r3, #32
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c59      	adds	r1, r3, #1
 8001122:	4865      	ldr	r0, [pc, #404]	; (80012b8 <GM6020_Update+0x340>)
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4403      	add	r3, r0
 8001130:	3320      	adds	r3, #32
 8001132:	6019      	str	r1, [r3, #0]

	/* 电机输出轴角度      */
	h6020s[id].AxisData.AxisAngle_inDegree  =  h6020s[id].Calculate.RotorRound * 360.0f ;
 8001134:	4960      	ldr	r1, [pc, #384]	; (80012b8 <GM6020_Update+0x340>)
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	3320      	adds	r3, #32
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80012b4 <GM6020_Update+0x33c>
 8001152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001156:	4958      	ldr	r1, [pc, #352]	; (80012b8 <GM6020_Update+0x340>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	015b      	lsls	r3, r3, #5
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3324      	adds	r3, #36	; 0x24
 8001166:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].AxisData.AxisAngle_inDegree  += h6020s[id].Calculate.RotorAngle_0_360_Log[0] - h6020s[id].Calculate.RotorAngle_0_360_OffSet;
 800116a:	4953      	ldr	r1, [pc, #332]	; (80012b8 <GM6020_Update+0x340>)
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	3324      	adds	r3, #36	; 0x24
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	494e      	ldr	r1, [pc, #312]	; (80012b8 <GM6020_Update+0x340>)
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3314      	adds	r3, #20
 800118e:	edd3 6a00 	vldr	s13, [r3]
 8001192:	4949      	ldr	r1, [pc, #292]	; (80012b8 <GM6020_Update+0x340>)
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	015b      	lsls	r3, r3, #5
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	331c      	adds	r3, #28
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	4942      	ldr	r1, [pc, #264]	; (80012b8 <GM6020_Update+0x340>)
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3324      	adds	r3, #36	; 0x24
 80011be:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].AxisData.AxisAngle_inDegree  /= h6020s[id].reductionRate; 
 80011c2:	493d      	ldr	r1, [pc, #244]	; (80012b8 <GM6020_Update+0x340>)
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	3324      	adds	r3, #36	; 0x24
 80011d2:	edd3 6a00 	vldr	s13, [r3]
 80011d6:	4938      	ldr	r1, [pc, #224]	; (80012b8 <GM6020_Update+0x340>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	332c      	adds	r3, #44	; 0x2c
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ee:	4932      	ldr	r1, [pc, #200]	; (80012b8 <GM6020_Update+0x340>)
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	015b      	lsls	r3, r3, #5
 80011f6:	4413      	add	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	3324      	adds	r3, #36	; 0x24
 80011fe:	edc3 7a00 	vstr	s15, [r3]

	h6020s[id].AxisData.AxisVelocity        =  h6020s[id].FdbData.rpm / h6020s[id].reductionRate;
 8001202:	492d      	ldr	r1, [pc, #180]	; (80012b8 <GM6020_Update+0x340>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	015b      	lsls	r3, r3, #5
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3308      	adds	r3, #8
 8001212:	edd3 6a00 	vldr	s13, [r3]
 8001216:	4928      	ldr	r1, [pc, #160]	; (80012b8 <GM6020_Update+0x340>)
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	332c      	adds	r3, #44	; 0x2c
 8001226:	ed93 7a00 	vldr	s14, [r3]
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	4922      	ldr	r1, [pc, #136]	; (80012b8 <GM6020_Update+0x340>)
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	015b      	lsls	r3, r3, #5
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3328      	adds	r3, #40	; 0x28
 800123e:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].Calculate.RotorAngle_all		  =  h6020s[id].Calculate.RotorRound * 360 + h6020s[id].Calculate.RotorAngle_0_360_Log[0] - h6020s[id].Calculate.RotorAngle_0_360_OffSet;
 8001242:	491d      	ldr	r1, [pc, #116]	; (80012b8 <GM6020_Update+0x340>)
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	3320      	adds	r3, #32
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001264:	4914      	ldr	r1, [pc, #80]	; (80012b8 <GM6020_Update+0x340>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	015b      	lsls	r3, r3, #5
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	3314      	adds	r3, #20
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <GM6020_Update+0x340>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	331c      	adds	r3, #28
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	4908      	ldr	r1, [pc, #32]	; (80012b8 <GM6020_Update+0x340>)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	015b      	lsls	r3, r3, #5
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3310      	adds	r3, #16
 80012a4:	edc3 7a00 	vstr	s15, [r3]


}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	43b40000 	.word	0x43b40000
 80012b8:	20000030 	.word	0x20000030
 80012bc:	43340000 	.word	0x43340000
 80012c0:	c3340000 	.word	0xc3340000

080012c4 <GM6020_ctrl>:


void GM6020_ctrl(void){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8

		for(int i = 0; i <2;i++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	e02c      	b.n	800132a <GM6020_ctrl+0x66>
//            h6020s[i].posPID.fdb = h6020s[i].AxisData.AxisAngle_inDegree;
//            h6020s[i].posPID.ref = 10.0;
            P_Calc(&h6020s[i].posPID);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	3358      	adds	r3, #88	; 0x58
 80012dc:	4a21      	ldr	r2, [pc, #132]	; (8001364 <GM6020_ctrl+0xa0>)
 80012de:	4413      	add	r3, r2
 80012e0:	3304      	adds	r3, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fcbc 	bl	8000c60 <P_Calc>
            h6020s[i].speedPID.ref = h6020s[i].posPID.output;
 80012e8:	491e      	ldr	r1, [pc, #120]	; (8001364 <GM6020_ctrl+0xa0>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	337c      	adds	r3, #124	; 0x7c
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	481a      	ldr	r0, [pc, #104]	; (8001364 <GM6020_ctrl+0xa0>)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	015b      	lsls	r3, r3, #5
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4403      	add	r3, r0
 8001308:	3344      	adds	r3, #68	; 0x44
 800130a:	6019      	str	r1, [r3, #0]
            // h6020s[1].speedPID.fdb = h6020s[1].FdbData.rpm;
            // h6020s[1].speedPID.ref = 60.0;



            PID_Calc(&h6020s[i].speedPID);
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	015b      	lsls	r3, r3, #5
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	3330      	adds	r3, #48	; 0x30
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <GM6020_ctrl+0xa0>)
 800131a:	4413      	add	r3, r2
 800131c:	3304      	adds	r3, #4
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fce3 	bl	8000cea <PID_Calc>
		for(int i = 0; i <2;i++) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b01      	cmp	r3, #1
 800132e:	ddcf      	ble.n	80012d0 <GM6020_ctrl+0xc>
        }

        CanTransmit_GM6020_1234(&hcan1,
                             h6020s[0].speedPID.output,
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <GM6020_ctrl+0xa0>)
 8001332:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
        CanTransmit_GM6020_1234(&hcan1,
 8001336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133a:	ee17 3a90 	vmov	r3, s15
 800133e:	b219      	sxth	r1, r3
                             h6020s[1].speedPID.output,
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <GM6020_ctrl+0xa0>)
 8001342:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
        CanTransmit_GM6020_1234(&hcan1,
 8001346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134a:	ee17 3a90 	vmov	r3, s15
 800134e:	b21a      	sxth	r2, r3
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <GM6020_ctrl+0xa4>)
 8001358:	f7ff fd46 	bl	8000de8 <CanTransmit_GM6020_1234>
                             0,
                             0);

}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000030 	.word	0x20000030
 8001368:	200003cc 	.word	0x200003cc

0800136c <Joy_Decode>:
//    }
//    return crc;
//}

void Joy_Decode(void)
{
 800136c:	b490      	push	{r4, r7}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
    for (int i = 0; i < JOY_BAG_LENGTH; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e01f      	b.n	80013b8 <Joy_Decode+0x4c>
        Joy_Bag_t tempBag = *(Joy_Bag_t*) (void*) (&(joy_raw_data[i]));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <Joy_Decode+0x60>)
 800137c:	441a      	add	r2, r3
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4614      	mov	r4, r2
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	6861      	ldr	r1, [r4, #4]
 8001386:	68a2      	ldr	r2, [r4, #8]
 8001388:	c307      	stmia	r3!, {r0, r1, r2}
 800138a:	7b22      	ldrb	r2, [r4, #12]
 800138c:	701a      	strb	r2, [r3, #0]

        if (tempBag.head[0] == JOY_HEADER_HIGH &&tempBag.head[1] == JOY_HEADER_LOW &&tempBag.state==OK)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d10e      	bne.n	80013b2 <Joy_Decode+0x46>
 8001394:	7a3b      	ldrb	r3, [r7, #8]
 8001396:	2b55      	cmp	r3, #85	; 0x55
 8001398:	d10b      	bne.n	80013b2 <Joy_Decode+0x46>
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <Joy_Decode+0x46>
        {
                joy_revbag = *(Joy_Bag_t*)(void*)(tempBag.raw);
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <Joy_Decode+0x64>)
 80013a2:	461c      	mov	r4, r3
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013a8:	6020      	str	r0, [r4, #0]
 80013aa:	6061      	str	r1, [r4, #4]
 80013ac:	60a2      	str	r2, [r4, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	7323      	strb	r3, [r4, #12]
    for (int i = 0; i < JOY_BAG_LENGTH; i++) {
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	dddc      	ble.n	8001378 <Joy_Decode+0xc>
        }
    }
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc90      	pop	{r4, r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200004a0 	.word	0x200004a0
 80013d0:	20000528 	.word	0x20000528

080013d4 <IMU_Decode>:

void IMU_Decode(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b096      	sub	sp, #88	; 0x58
 80013d8:	af00      	add	r7, sp, #0

    for (int i = 0; i < IMU_BAG_LENGTH; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
 80013de:	e018      	b.n	8001412 <IMU_Decode+0x3e>
        IMU_Bag_t tempBag = *(IMU_Bag_t*) (void*) (&(imu_raw_data[i]));
 80013e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <IMU_Decode+0x50>)
 80013e4:	441a      	add	r2, r3
 80013e6:	463b      	mov	r3, r7
 80013e8:	4611      	mov	r1, r2
 80013ea:	2252      	movs	r2, #82	; 0x52
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fa33 	bl	8005858 <memcpy>

        if (tempBag.head == IMU_HEADER &&tempBag.type == IMU_TYPE )
 80013f2:	783b      	ldrb	r3, [r7, #0]
 80013f4:	2b5a      	cmp	r3, #90	; 0x5a
 80013f6:	d109      	bne.n	800140c <IMU_Decode+0x38>
 80013f8:	787b      	ldrb	r3, [r7, #1]
 80013fa:	2ba5      	cmp	r3, #165	; 0xa5
 80013fc:	d106      	bne.n	800140c <IMU_Decode+0x38>
        {
                imu_revbag = *(IMU_Bag_t*)(void*)(tempBag.raw);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <IMU_Decode+0x54>)
 8001400:	4618      	mov	r0, r3
 8001402:	463b      	mov	r3, r7
 8001404:	2252      	movs	r2, #82	; 0x52
 8001406:	4619      	mov	r1, r3
 8001408:	f004 fa26 	bl	8005858 <memcpy>
    for (int i = 0; i < IMU_BAG_LENGTH; i++) {
 800140c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140e:	3301      	adds	r3, #1
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
 8001412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001414:	2b51      	cmp	r3, #81	; 0x51
 8001416:	dde3      	ble.n	80013e0 <IMU_Decode+0xc>
        }
    }

}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3758      	adds	r7, #88	; 0x58
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003fc 	.word	0x200003fc
 8001428:	200004bc 	.word	0x200004bc

0800142c <YOLO_Decode>:

void YOLO_Decode(void){
 800142c:	b4b0      	push	{r4, r5, r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0

    for (int i = 0; i < YOLO_BAG_LENGTH; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e02e      	b.n	8001496 <YOLO_Decode+0x6a>
    {
        YOLO_Bag_t tempBag = *(YOLO_Bag_t*)(void*)(&(yolo_raw_data[i]));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <YOLO_Decode+0x7c>)
 800143c:	4413      	add	r3, r2
 800143e:	1d3c      	adds	r4, r7, #4
 8001440:	461d      	mov	r5, r3
 8001442:	6828      	ldr	r0, [r5, #0]
 8001444:	6869      	ldr	r1, [r5, #4]
 8001446:	68aa      	ldr	r2, [r5, #8]
 8001448:	68eb      	ldr	r3, [r5, #12]
 800144a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144c:	6928      	ldr	r0, [r5, #16]
 800144e:	6020      	str	r0, [r4, #0]
 8001450:	8aab      	ldrh	r3, [r5, #20]
 8001452:	7daa      	ldrb	r2, [r5, #22]
 8001454:	80a3      	strh	r3, [r4, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	71a3      	strb	r3, [r4, #6]
        if(tempBag.head[0] == YOLO_HEADER_HIGH && tempBag.head[1] == YOLO_HEADER_LOW)
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b11      	cmp	r3, #17
 800145e:	d117      	bne.n	8001490 <YOLO_Decode+0x64>
 8001460:	7a3b      	ldrb	r3, [r7, #8]
 8001462:	2ba5      	cmp	r3, #165	; 0xa5
 8001464:	d114      	bne.n	8001490 <YOLO_Decode+0x64>
        {
            yolo_revbag = *(YOLO_Bag_t*)(void*)(tempBag.raw);
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <YOLO_Decode+0x80>)
 8001468:	461d      	mov	r5, r3
 800146a:	1d3c      	adds	r4, r7, #4
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	6028      	str	r0, [r5, #0]
 8001470:	6069      	str	r1, [r5, #4]
 8001472:	60aa      	str	r2, [r5, #8]
 8001474:	60eb      	str	r3, [r5, #12]
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	6128      	str	r0, [r5, #16]
 800147a:	88a3      	ldrh	r3, [r4, #4]
 800147c:	79a2      	ldrb	r2, [r4, #6]
 800147e:	82ab      	strh	r3, [r5, #20]
 8001480:	4613      	mov	r3, r2
 8001482:	75ab      	strb	r3, [r5, #22]
            flag_counter ++;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <YOLO_Decode+0x84>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <YOLO_Decode+0x84>)
 800148e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < YOLO_BAG_LENGTH; i++)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	3301      	adds	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2b16      	cmp	r3, #22
 800149a:	ddcd      	ble.n	8001438 <YOLO_Decode+0xc>
        }
    }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bcb0      	pop	{r4, r5, r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000538 	.word	0x20000538
 80014ac:	20000510 	.word	0x20000510
 80014b0:	2000002c 	.word	0x2000002c

080014b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    if(huart->Instance==huart3.Instance)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_UART_RxCpltCallback+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d101      	bne.n	80014cc <HAL_UART_RxCpltCallback+0x18>
    {
        Joy_Decode();
 80014c8:	f7ff ff50 	bl	800136c <Joy_Decode>
    }
    if(huart->Instance == huart6.Instance)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_UART_RxCpltCallback+0x44>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d101      	bne.n	80014dc <HAL_UART_RxCpltCallback+0x28>
    {
        IMU_Decode();
 80014d8:	f7ff ff7c 	bl	80013d4 <IMU_Decode>
    }

    if(huart->Instance == huart8.Instance)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_UART_RxCpltCallback+0x48>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d101      	bne.n	80014ec <HAL_UART_RxCpltCallback+0x38>
    {
        YOLO_Decode();
 80014e8:	f7ff ffa0 	bl	800142c <YOLO_Decode>
    }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000670 	.word	0x20000670
 80014f8:	20000758 	.word	0x20000758
 80014fc:	20000714 	.word	0x20000714

08001500 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_CAN1_Init+0x64>)
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <MX_CAN1_Init+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_CAN1_Init+0x64>)
 800150c:	2209      	movs	r2, #9
 800150e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_CAN1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_CAN1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_CAN1_Init+0x64>)
 800151e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001522:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_CAN1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_CAN1_Init+0x64>)
 800152c:	2200      	movs	r2, #0
 800152e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_CAN1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_CAN1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_CAN1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_CAN1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_CAN1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_CAN1_Init+0x64>)
 8001550:	f000 fefa 	bl	8002348 <HAL_CAN_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800155a:	f000 f9e3 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003cc 	.word	0x200003cc
 8001568:	40006400 	.word	0x40006400

0800156c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_CAN_MspInit+0x94>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d133      	bne.n	80015f6 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_CAN_MspInit+0x98>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_CAN_MspInit+0x98>)
 8001598:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_CAN_MspInit+0x98>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_CAN_MspInit+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <HAL_CAN_MspInit+0x98>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_CAN_MspInit+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015d6:	2309      	movs	r3, #9
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_CAN_MspInit+0x9c>)
 80015e2:	f002 f9cb 	bl	800397c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2014      	movs	r0, #20
 80015ec:	f001 fe1f 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015f0:	2014      	movs	r0, #20
 80015f2:	f001 fe38 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40006400 	.word	0x40006400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020c00 	.word	0x40020c00

0800160c <CANFilterInit>:
#include "can_app.h"

uint8_t CanReceiveData[8];

HAL_StatusTypeDef CANFilterInit(CAN_HandleTypeDef* hcan){
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterIdHigh = 0x0000;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.SlaveStartFilterBank = 14;
 8001638:	230e      	movs	r3, #14
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
	
  if(HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 ff7c 	bl	8002540 <HAL_CAN_ConfigFilter>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <CANFilterInit+0x46>
  {
    Error_Handler();
 800164e:	f000 f969 	bl	8001924 <Error_Handler>
  }

  if (HAL_CAN_Start(hcan) != HAL_OK)
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f001 f854 	bl	8002700 <HAL_CAN_Start>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <CANFilterInit+0x56>
  {
    Error_Handler();
 800165e:	f000 f961 	bl	8001924 <Error_Handler>
  }
	
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001662:	2102      	movs	r1, #2
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 fab1 	bl	8002bcc <HAL_CAN_ActivateNotification>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <CANFilterInit+0x68>
  {
    Error_Handler();
 8001670:	f000 f958 	bl	8001924 <Error_Handler>
  }

	return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <CanDataDecode>:

void CanDataDecode(CAN_RxHeaderTypeDef RxHeader){
 8001680:	b084      	sub	sp, #16
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
 8001686:	f107 0c08 	add.w	ip, r7, #8
 800168a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		if (RxHeader.StdId > 0x204)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001694:	d904      	bls.n	80016a0 <CanDataDecode+0x20>
		{
            GM6020_CanMsgDecode(RxHeader.StdId,CanReceiveData);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	4904      	ldr	r1, [pc, #16]	; (80016ac <CanDataDecode+0x2c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fc28 	bl	8000ef0 <GM6020_CanMsgDecode>

	
  if( RxHeader.IDE == CAN_ID_EXT ){
    // decode vesc
  }
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a8:	b004      	add	sp, #16
 80016aa:	4770      	bx	lr
 80016ac:	200003f4 	.word	0x200003f4

080016b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08f      	sub	sp, #60	; 0x3c
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CanReceiveData)
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 f971 	bl	80029a8 <HAL_CAN_GetRxMessage>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
			!= HAL_OK) {
		Error_Handler();            //错误状态回调函敿
 80016cc:	f000 f92a 	bl	8001924 <Error_Handler>
	}
    CanDataDecode(RxHeader);
 80016d0:	466c      	mov	r4, sp
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e4:	f7ff ffcc 	bl	8001680 <CanDataDecode>
  
}
 80016e8:	bf00      	nop
 80016ea:	372c      	adds	r7, #44	; 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	200003f4 	.word	0x200003f4

080016f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_DMA_Init+0x78>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a1a      	ldr	r2, [pc, #104]	; (800176c <MX_DMA_Init+0x78>)
 8001704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_DMA_Init+0x78>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_DMA_Init+0x78>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_DMA_Init+0x78>)
 8001720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_DMA_Init+0x78>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	200c      	movs	r0, #12
 8001738:	f001 fd79 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800173c:	200c      	movs	r0, #12
 800173e:	f001 fd92 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2011      	movs	r0, #17
 8001748:	f001 fd71 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800174c:	2011      	movs	r0, #17
 800174e:	f001 fd8a 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2039      	movs	r0, #57	; 0x39
 8001758:	f001 fd69 	bl	800322e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800175c:	2039      	movs	r0, #57	; 0x39
 800175e:	f001 fd82 	bl	8003266 <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_GPIO_Init+0xa0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <MX_GPIO_Init+0xa0>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_GPIO_Init+0xa0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <MX_GPIO_Init+0xa0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <MX_GPIO_Init+0xa0>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_GPIO_Init+0xa0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001818:	f000 fd24 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181c:	f000 f812 	bl	8001844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001820:	f7ff ffa6 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8001824:	f7ff ff66 	bl	80016f4 <MX_DMA_Init>
  MX_CAN1_Init();
 8001828:	f7ff fe6a 	bl	8001500 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 800182c:	f000 fb78 	bl	8001f20 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8001830:	f000 fb4c 	bl	8001ecc <MX_USART3_UART_Init>
  MX_UART8_Init();
 8001834:	f000 fb20 	bl	8001e78 <MX_UART8_Init>
  MX_TIM2_Init();
 8001838:	f000 faaa 	bl	8001d90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  proj_init();
 800183c:	f000 f9e6 	bl	8001c0c <proj_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1)
 8001840:	e7fe      	b.n	8001840 <main+0x2c>
	...

08001844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	2230      	movs	r2, #48	; 0x30
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f004 f80e 	bl	8005874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <SystemClock_Config+0xd8>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a2a      	ldr	r2, [pc, #168]	; (800191c <SystemClock_Config+0xd8>)
 8001872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <SystemClock_Config+0xd8>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001884:	2300      	movs	r3, #0
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <SystemClock_Config+0xdc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <SystemClock_Config+0xdc>)
 800188e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <SystemClock_Config+0xdc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018aa:	2302      	movs	r3, #2
 80018ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80018b4:	2306      	movs	r3, #6
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018b8:	23b4      	movs	r3, #180	; 0xb4
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018bc:	2302      	movs	r3, #2
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018c0:	2304      	movs	r3, #4
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c4:	f107 0320 	add.w	r3, r7, #32
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fa53 	bl	8003d74 <HAL_RCC_OscConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018d4:	f000 f826 	bl	8001924 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018d8:	f002 f9fc 	bl	8003cd4 <HAL_PWREx_EnableOverDrive>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018e2:	f000 f81f 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e6:	230f      	movs	r3, #15
 80018e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2105      	movs	r1, #5
 8001904:	4618      	mov	r0, r3
 8001906:	f002 fcad 	bl	8004264 <HAL_RCC_ClockConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001910:	f000 f808 	bl	8001924 <Error_Handler>
  }
}
 8001914:	bf00      	nop
 8001916:	3750      	adds	r7, #80	; 0x50
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <pid_update_for_object_tracking>:
//
// Created by zhuzhengming on 2021/10/28.
//
#include "mission.h"

void pid_update_for_object_tracking(void){
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
        for(int i =0; i<7; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	e06c      	b.n	8001a16 <pid_update_for_object_tracking+0xe6>
        {

            h6020s[i].speedPID.KP = 15;
 800193c:	493b      	ldr	r1, [pc, #236]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3334      	adds	r3, #52	; 0x34
 800194c:	4a38      	ldr	r2, [pc, #224]	; (8001a30 <pid_update_for_object_tracking+0x100>)
 800194e:	601a      	str	r2, [r3, #0]
            h6020s[i].speedPID.KI = 1;
 8001950:	4936      	ldr	r1, [pc, #216]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3338      	adds	r3, #56	; 0x38
 8001960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001964:	601a      	str	r2, [r3, #0]
            h6020s[i].speedPID.KD = 1;
 8001966:	4931      	ldr	r1, [pc, #196]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	015b      	lsls	r3, r3, #5
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	333c      	adds	r3, #60	; 0x3c
 8001976:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800197a:	601a      	str	r2, [r3, #0]
            h6020s[i].speedPID.outputMax = 20000;
 800197c:	492b      	ldr	r1, [pc, #172]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	015b      	lsls	r3, r3, #5
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3358      	adds	r3, #88	; 0x58
 800198c:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <pid_update_for_object_tracking+0x104>)
 800198e:	601a      	str	r2, [r3, #0]

            h6020s[i].posPID.KP = 20.0f;
 8001990:	4926      	ldr	r1, [pc, #152]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	015b      	lsls	r3, r3, #5
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	335c      	adds	r3, #92	; 0x5c
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <pid_update_for_object_tracking+0x108>)
 80019a2:	601a      	str	r2, [r3, #0]
            //h6020s[i].posPID.KP = 50.0f;
            h6020s[i].posPID.KI = 0;
 80019a4:	4921      	ldr	r1, [pc, #132]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
            h6020s[i].posPID.KD =0;
 80019ba:	491c      	ldr	r1, [pc, #112]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	015b      	lsls	r3, r3, #5
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3364      	adds	r3, #100	; 0x64
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
            h6020s[i].posPID.outputMax = 1500;
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	015b      	lsls	r3, r3, #5
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3380      	adds	r3, #128	; 0x80
 80019e0:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <pid_update_for_object_tracking+0x10c>)
 80019e2:	601a      	str	r2, [r3, #0]

            h6020s[i].reductionRate = 1.0f;
 80019e4:	4911      	ldr	r1, [pc, #68]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	332c      	adds	r3, #44	; 0x2c
 80019f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019f8:	601a      	str	r2, [r3, #0]
            h6020s[i].encoder_resolution = 8192.0f;
 80019fa:	490c      	ldr	r1, [pc, #48]	; (8001a2c <pid_update_for_object_tracking+0xfc>)
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3330      	adds	r3, #48	; 0x30
 8001a0a:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001a0e:	601a      	str	r2, [r3, #0]
        for(int i =0; i<7; i++)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3301      	adds	r3, #1
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b06      	cmp	r3, #6
 8001a1a:	dd8f      	ble.n	800193c <pid_update_for_object_tracking+0xc>
        }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000030 	.word	0x20000030
 8001a30:	41700000 	.word	0x41700000
 8001a34:	469c4000 	.word	0x469c4000
 8001a38:	41a00000 	.word	0x41a00000
 8001a3c:	44bb8000 	.word	0x44bb8000

08001a40 <mode_change>:

void mode_change(void){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
    joy_revbag.buttons = 2;
 8001a44:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <mode_change+0x18c>)
 8001a46:	2202      	movs	r2, #2
 8001a48:	731a      	strb	r2, [r3, #12]
    switch(joy_revbag.buttons){
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <mode_change+0x18c>)
 8001a4c:	7b1b      	ldrb	r3, [r3, #12]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d060      	beq.n	8001b14 <mode_change+0xd4>
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	f300 80b7 	bgt.w	8001bc6 <mode_change+0x186>
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <mode_change+0x22>
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d014      	beq.n	8001a8a <mode_change+0x4a>
            h6020s[1].posPID.ref = (float )(yolo_revbag.image_cols/10*2);

            break;

    }
}
 8001a60:	e0b1      	b.n	8001bc6 <mode_change+0x186>
            h6020s[1].posPID.fdb = imu_revbag.eul[0];   //pitch
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <mode_change+0x190>)
 8001a64:	f8d3 3036 	ldr.w	r3, [r3, #54]	; 0x36
 8001a68:	4a5a      	ldr	r2, [pc, #360]	; (8001bd4 <mode_change+0x194>)
 8001a6a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            h6020s[1].posPID.ref = 0.0;
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <mode_change+0x194>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
            h6020s[0].posPID.fdb = h6020s[0].AxisData.AxisAngle_inDegree;
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <mode_change+0x194>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	4a55      	ldr	r2, [pc, #340]	; (8001bd4 <mode_change+0x194>)
 8001a7e:	6693      	str	r3, [r2, #104]	; 0x68
            h6020s[0].posPID.ref = 0.0;
 8001a80:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <mode_change+0x194>)
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	66da      	str	r2, [r3, #108]	; 0x6c
            break;
 8001a88:	e09d      	b.n	8001bc6 <mode_change+0x186>
            h6020s[0].posPID.fdb = imu_revbag.eul[1];
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <mode_change+0x190>)
 8001a8c:	f8d3 303a 	ldr.w	r3, [r3, #58]	; 0x3a
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <mode_change+0x194>)
 8001a92:	6693      	str	r3, [r2, #104]	; 0x68
            h6020s[1].posPID.fdb = imu_revbag.eul[2];
 8001a94:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <mode_change+0x190>)
 8001a96:	f8d3 303e 	ldr.w	r3, [r3, #62]	; 0x3e
 8001a9a:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <mode_change+0x194>)
 8001a9c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
            h6020s[0].posPID.ref = (float)((joy_revbag.left_joysticks[0]-0.5) * 90.0f);
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <mode_change+0x18c>)
 8001aa2:	7a1b      	ldrb	r3, [r3, #8]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fe1d 	bl	80006e4 <__aeabi_i2d>
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <mode_change+0x198>)
 8001ab0:	f7fe fcca 	bl	8000448 <__aeabi_dsub>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <mode_change+0x19c>)
 8001ac2:	f7fe fb93 	bl	80001ec <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe fe73 	bl	80007b8 <__aeabi_d2f>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <mode_change+0x194>)
 8001ad6:	66d3      	str	r3, [r2, #108]	; 0x6c
            h6020s[1].posPID.ref = (float)((joy_revbag.left_joysticks[1]-0.5) * 90.0f);
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <mode_change+0x18c>)
 8001ada:	7a5b      	ldrb	r3, [r3, #9]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fe01 	bl	80006e4 <__aeabi_i2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <mode_change+0x198>)
 8001ae8:	f7fe fcae 	bl	8000448 <__aeabi_dsub>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <mode_change+0x19c>)
 8001afa:	f7fe fb77 	bl	80001ec <__aeabi_dmul>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe fe57 	bl	80007b8 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <mode_change+0x194>)
 8001b0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
            break;
 8001b12:	e058      	b.n	8001bc6 <mode_change+0x186>
            pid_update_for_object_tracking();
 8001b14:	f7ff ff0c 	bl	8001930 <pid_update_for_object_tracking>
            if(yolo_revbag.object_num == 1 && yolo_revbag.x > 20.0 && yolo_revbag.y > 20.0) {
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <mode_change+0x1a0>)
 8001b1a:	7d9b      	ldrb	r3, [r3, #22]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d12f      	bne.n	8001b80 <mode_change+0x140>
 8001b20:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <mode_change+0x1a0>)
 8001b22:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8001b26:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001b2a:	ee07 3a10 	vmov	s14, r3
 8001b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd23      	ble.n	8001b80 <mode_change+0x140>
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <mode_change+0x1a0>)
 8001b3a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001b3e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8001b42:	ee07 3a10 	vmov	s14, r3
 8001b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd17      	ble.n	8001b80 <mode_change+0x140>
                h6020s[0].posPID.fdb = (float) (yolo_revbag.x / 10);
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <mode_change+0x1a0>)
 8001b52:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8001b56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <mode_change+0x194>)
 8001b64:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
                h6020s[1].posPID.fdb = (float) (yolo_revbag.y / 10);
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <mode_change+0x1a0>)
 8001b6a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001b6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <mode_change+0x194>)
 8001b7c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
            h6020s[0].posPID.ref = (float )(yolo_revbag.image_rows/10*2);
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <mode_change+0x1a0>)
 8001b82:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <mode_change+0x1a4>)
 8001b88:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8c:	1092      	asrs	r2, r2, #2
 8001b8e:	17db      	asrs	r3, r3, #31
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <mode_change+0x194>)
 8001b9e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
            h6020s[1].posPID.ref = (float )(yolo_revbag.image_cols/10*2);
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <mode_change+0x1a0>)
 8001ba4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <mode_change+0x1a4>)
 8001baa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bae:	1092      	asrs	r2, r2, #2
 8001bb0:	17db      	asrs	r3, r3, #31
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <mode_change+0x194>)
 8001bc0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
            break;
 8001bc4:	bf00      	nop
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000528 	.word	0x20000528
 8001bd0:	200004bc 	.word	0x200004bc
 8001bd4:	20000030 	.word	0x20000030
 8001bd8:	3fe00000 	.word	0x3fe00000
 8001bdc:	40568000 	.word	0x40568000
 8001be0:	20000510 	.word	0x20000510
 8001be4:	66666667 	.word	0x66666667

08001be8 <HAL_TIM_PeriodElapsedCallback>:

//  100HZ
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d103      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x1a>

        GM6020_ctrl();
 8001bfa:	f7ff fb63 	bl	80012c4 <GM6020_ctrl>
        mode_change();
 8001bfe:	f7ff ff1f 	bl	8001a40 <mode_change>
    }
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <proj_init>:
#include "proj_init.h"


void proj_init(){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

CANFilterInit(&hcan1);
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <proj_init+0x38>)
 8001c12:	f7ff fcfb 	bl	800160c <CANFilterInit>
GM6020_Init();
 8001c16:	f7fe ff9b 	bl	8000b50 <GM6020_Init>

HAL_TIM_Base_Start_IT(&htim2);
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <proj_init+0x3c>)
 8001c1c:	f002 fd42 	bl	80046a4 <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_DMA(&huart3,joy_raw_data,JOY_BAG_LENGTH*2);    //joy:  uart3
 8001c20:	221a      	movs	r2, #26
 8001c22:	490a      	ldr	r1, [pc, #40]	; (8001c4c <proj_init+0x40>)
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <proj_init+0x44>)
 8001c26:	f003 f9bc 	bl	8004fa2 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart6, imu_raw_data, IMU_BAG_LENGTH*2 );    //imu: uart6
 8001c2a:	22a4      	movs	r2, #164	; 0xa4
 8001c2c:	4909      	ldr	r1, [pc, #36]	; (8001c54 <proj_init+0x48>)
 8001c2e:	480a      	ldr	r0, [pc, #40]	; (8001c58 <proj_init+0x4c>)
 8001c30:	f003 f9b7 	bl	8004fa2 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart8, yolo_raw_data, YOLO_BAG_LENGTH*2 );   //yolo: uart8
 8001c34:	222e      	movs	r2, #46	; 0x2e
 8001c36:	4909      	ldr	r1, [pc, #36]	; (8001c5c <proj_init+0x50>)
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <proj_init+0x54>)
 8001c3a:	f003 f9b2 	bl	8004fa2 <HAL_UART_Receive_DMA>

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200003cc 	.word	0x200003cc
 8001c48:	20000568 	.word	0x20000568
 8001c4c:	200004a0 	.word	0x200004a0
 8001c50:	20000670 	.word	0x20000670
 8001c54:	200003fc 	.word	0x200003fc
 8001c58:	20000758 	.word	0x20000758
 8001c5c:	20000538 	.word	0x20000538
 8001c60:	20000714 	.word	0x20000714

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fb02 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Stream1_IRQHandler+0x10>)
 8001d0e:	f001 fbcb 	bl	80034a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000610 	.word	0x20000610

08001d1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <DMA1_Stream6_IRQHandler+0x10>)
 8001d22:	f001 fbc1 	bl	80034a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200006b4 	.word	0x200006b4

08001d30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <CAN1_RX0_IRQHandler+0x10>)
 8001d36:	f000 ff6f 	bl	8002c18 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200003cc 	.word	0x200003cc

08001d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM2_IRQHandler+0x10>)
 8001d4a:	f002 fd1b 	bl	8004784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000568 	.word	0x20000568

08001d58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <DMA2_Stream1_IRQHandler+0x10>)
 8001d5e:	f001 fba3 	bl	80034a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200005b0 	.word	0x200005b0

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001db6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001dba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001dd8:	f002 fc14 	bl	8004604 <HAL_TIM_Base_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001de2:	f7ff fd9f 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	480d      	ldr	r0, [pc, #52]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001df4:	f002 fdce 	bl	8004994 <HAL_TIM_ConfigClockSource>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dfe:	f7ff fd91 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4806      	ldr	r0, [pc, #24]	; (8001e28 <MX_TIM2_Init+0x98>)
 8001e10:	f002 ffea 	bl	8004de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e1a:	f7ff fd83 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000568 	.word	0x20000568

08001e2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	201c      	movs	r0, #28
 8001e60:	f001 f9e5 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e64:	201c      	movs	r0, #28
 8001e66:	f001 f9fe 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_UART8_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e88:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_UART8_Init+0x4c>)
 8001eb0:	f003 f82a 	bl	8004f08 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001eba:	f7ff fd33 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000714 	.word	0x20000714
 8001ec8:	40007c00 	.word	0x40007c00

08001ecc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_USART3_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ed8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_USART3_UART_Init+0x4c>)
 8001f04:	f003 f800 	bl	8004f08 <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff fd09 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000670 	.word	0x20000670
 8001f1c:	40004800 	.word	0x40004800

08001f20 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_USART6_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART6_UART_Init+0x4c>)
 8001f58:	f002 ffd6 	bl	8004f08 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f7ff fcdf 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000758 	.word	0x20000758
 8001f70:	40011400 	.word	0x40011400

08001f74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_UART_MspInit+0x268>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d15b      	bne.n	800204e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	4b91      	ldr	r3, [pc, #580]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a90      	ldr	r2, [pc, #576]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	4b8a      	ldr	r3, [pc, #552]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a89      	ldr	r2, [pc, #548]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b87      	ldr	r3, [pc, #540]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001fde:	2308      	movs	r3, #8
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	487e      	ldr	r0, [pc, #504]	; (80021e4 <HAL_UART_MspInit+0x270>)
 8001fea:	f001 fcc7 	bl	800397c <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001fee:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8001ff0:	4a7e      	ldr	r2, [pc, #504]	; (80021ec <HAL_UART_MspInit+0x278>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8001ff6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <HAL_UART_MspInit+0x274>)
 800200a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200e:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002010:	4b75      	ldr	r3, [pc, #468]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002016:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800201c:	4b72      	ldr	r3, [pc, #456]	; (80021e8 <HAL_UART_MspInit+0x274>)
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b70      	ldr	r3, [pc, #448]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b6f      	ldr	r3, [pc, #444]	; (80021e8 <HAL_UART_MspInit+0x274>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002030:	486d      	ldr	r0, [pc, #436]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002032:	f001 f933 	bl	800329c <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800203c:	f7ff fc72 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
 8002046:	4a68      	ldr	r2, [pc, #416]	; (80021e8 <HAL_UART_MspInit+0x274>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800204c:	e0c2      	b.n	80021d4 <HAL_UART_MspInit+0x260>
  else if(uartHandle->Instance==USART3)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_UART_MspInit+0x27c>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d15c      	bne.n	8002112 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a5f      	ldr	r2, [pc, #380]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8002062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800207e:	f043 0308 	orr.w	r3, r3, #8
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a2:	2307      	movs	r3, #7
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4851      	ldr	r0, [pc, #324]	; (80021f4 <HAL_UART_MspInit+0x280>)
 80020ae:	f001 fc65 	bl	800397c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_UART_MspInit+0x288>)
 80020b6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80020b8:	4b4f      	ldr	r3, [pc, #316]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c0:	4b4d      	ldr	r3, [pc, #308]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d4:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020e0:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020f4:	4840      	ldr	r0, [pc, #256]	; (80021f8 <HAL_UART_MspInit+0x284>)
 80020f6:	f001 f8d1 	bl	800329c <HAL_DMA_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002100:	f7ff fc10 	bl	8001924 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3c      	ldr	r2, [pc, #240]	; (80021f8 <HAL_UART_MspInit+0x284>)
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
 800210a:	4a3b      	ldr	r2, [pc, #236]	; (80021f8 <HAL_UART_MspInit+0x284>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002110:	e060      	b.n	80021d4 <HAL_UART_MspInit+0x260>
  else if(uartHandle->Instance==USART6)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <HAL_UART_MspInit+0x28c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d15b      	bne.n	80021d4 <HAL_UART_MspInit+0x260>
    __HAL_RCC_USART6_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	6453      	str	r3, [r2, #68]	; 0x44
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	6313      	str	r3, [r2, #48]	; 0x30
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_UART_MspInit+0x26c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002154:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002162:	2303      	movs	r3, #3
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002166:	2308      	movs	r3, #8
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216e:	4619      	mov	r1, r3
 8002170:	4824      	ldr	r0, [pc, #144]	; (8002204 <HAL_UART_MspInit+0x290>)
 8002172:	f001 fc03 	bl	800397c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_UART_MspInit+0x294>)
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <HAL_UART_MspInit+0x298>)
 800217a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_UART_MspInit+0x294>)
 800217e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002182:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_UART_MspInit+0x294>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218a:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_UART_MspInit+0x294>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x294>)
 8002192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002196:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_MspInit+0x294>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021ba:	f001 f86f 	bl	800329c <HAL_DMA_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80021c4:	f7ff fbae 	bl	8001924 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
 80021ce:	4a0e      	ldr	r2, [pc, #56]	; (8002208 <HAL_UART_MspInit+0x294>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021d4:	bf00      	nop
 80021d6:	3738      	adds	r7, #56	; 0x38
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40007c00 	.word	0x40007c00
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40021000 	.word	0x40021000
 80021e8:	200006b4 	.word	0x200006b4
 80021ec:	400260a0 	.word	0x400260a0
 80021f0:	40004800 	.word	0x40004800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	20000610 	.word	0x20000610
 80021fc:	40026028 	.word	0x40026028
 8002200:	40011400 	.word	0x40011400
 8002204:	40021800 	.word	0x40021800
 8002208:	200005b0 	.word	0x200005b0
 800220c:	40026428 	.word	0x40026428

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002214:	480d      	ldr	r0, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800222c:	4c0b      	ldr	r4, [pc, #44]	; (800225c <LoopFillZerobss+0x26>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800223a:	f7ff fd97 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f003 fae7 	bl	8005810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7ff fae7 	bl	8001814 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002254:	080058cc 	.word	0x080058cc
  ldr r2, =_sbss
 8002258:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800225c:	200007a0 	.word	0x200007a0

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	; (80022a4 <HAL_Init+0x40>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_Init+0x40>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x40>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 ffc3 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fce4 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 ffdb 	bl	8003282 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e4:	f000 ffa3 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000008 	.word	0x20000008
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008
 800232c:	2000079c 	.word	0x2000079c

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	2000079c 	.word	0x2000079c

08002348 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0ed      	b.n	8002536 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff f900 	bl	800156c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff ffd8 	bl	8002330 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff ffd4 	bl	8002330 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e0c5      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0e5      	beq.n	8002384 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0202 	bic.w	r2, r2, #2
 80023c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c8:	f7ff ffb2 	bl	8002330 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ce:	e012      	b.n	80023f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023d0:	f7ff ffae 	bl	8002330 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b0a      	cmp	r3, #10
 80023dc:	d90b      	bls.n	80023f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2205      	movs	r2, #5
 80023ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e09f      	b.n	8002536 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1e5      	bne.n	80023d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d108      	bne.n	800241e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e007      	b.n	800242e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7e5b      	ldrb	r3, [r3, #25]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e007      	b.n	8002458 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002456:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7e9b      	ldrb	r3, [r3, #26]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d108      	bne.n	8002472 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0220 	orr.w	r2, r2, #32
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0220 	bic.w	r2, r2, #32
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7edb      	ldrb	r3, [r3, #27]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0210 	bic.w	r2, r2, #16
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e007      	b.n	80024ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0210 	orr.w	r2, r2, #16
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d108      	bne.n	80024c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7f5b      	ldrb	r3, [r3, #29]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d108      	bne.n	80024f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0204 	orr.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e007      	b.n	8002500 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0204 	bic.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002556:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d003      	beq.n	8002566 <HAL_CAN_ConfigFilter+0x26>
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b02      	cmp	r3, #2
 8002562:	f040 80be 	bne.w	80026e2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_CAN_ConfigFilter+0x1bc>)
 8002568:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002580:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	431a      	orrs	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2201      	movs	r2, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	401a      	ands	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d123      	bne.n	8002610 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3248      	adds	r2, #72	; 0x48
 80025f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002604:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002606:	6979      	ldr	r1, [r7, #20]
 8002608:	3348      	adds	r3, #72	; 0x48
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d122      	bne.n	800265e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	431a      	orrs	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002638:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3248      	adds	r2, #72	; 0x48
 800263e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002652:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	3348      	adds	r3, #72	; 0x48
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002678:	e007      	b.n	800268a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026d4:	f023 0201 	bic.w	r2, r3, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e006      	b.n	80026f0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40006400 	.word	0x40006400

08002700 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d12e      	bne.n	8002772 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800272c:	f7ff fe00 	bl	8002330 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002732:	e012      	b.n	800275a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002734:	f7ff fdfc 	bl	8002330 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b0a      	cmp	r3, #10
 8002740:	d90b      	bls.n	800275a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2205      	movs	r2, #5
 8002752:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e012      	b.n	8002780 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e006      	b.n	8002780 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d003      	beq.n	80027b4 <HAL_CAN_AddTxMessage+0x2c>
 80027ac:	7ffb      	ldrb	r3, [r7, #31]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	f040 80b8 	bne.w	8002924 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a0 	beq.w	8002914 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	0e1b      	lsrs	r3, r3, #24
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d907      	bls.n	80027f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e09e      	b.n	8002932 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027f4:	2201      	movs	r2, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	409a      	lsls	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	6809      	ldr	r1, [r1, #0]
 8002814:	431a      	orrs	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3318      	adds	r3, #24
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e00f      	b.n	8002842 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800282c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002832:	68f9      	ldr	r1, [r7, #12]
 8002834:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002836:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3318      	adds	r3, #24
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	440b      	add	r3, r1
 8002840:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	3318      	adds	r3, #24
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	3304      	adds	r3, #4
 8002854:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	7d1b      	ldrb	r3, [r3, #20]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d111      	bne.n	8002882 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3318      	adds	r3, #24
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	4413      	add	r3, r2
 800286a:	3304      	adds	r3, #4
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3318      	adds	r3, #24
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	440b      	add	r3, r1
 800287e:	3304      	adds	r3, #4
 8002880:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3307      	adds	r3, #7
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	061a      	lsls	r2, r3, #24
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3306      	adds	r3, #6
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3305      	adds	r3, #5
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	4313      	orrs	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	3204      	adds	r2, #4
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	4610      	mov	r0, r2
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6811      	ldr	r1, [r2, #0]
 80028aa:	ea43 0200 	orr.w	r2, r3, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	440b      	add	r3, r1
 80028b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3303      	adds	r3, #3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	061a      	lsls	r2, r3, #24
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3302      	adds	r3, #2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	041b      	lsls	r3, r3, #16
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3301      	adds	r3, #1
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4313      	orrs	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	4610      	mov	r0, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	6811      	ldr	r1, [r2, #0]
 80028e0:	ea43 0200 	orr.w	r2, r3, r0
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	440b      	add	r3, r1
 80028ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3318      	adds	r3, #24
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	4413      	add	r3, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3318      	adds	r3, #24
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	440b      	add	r3, r1
 800290e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e00e      	b.n	8002932 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e006      	b.n	8002932 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	; 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002950:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d002      	beq.n	800295e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11d      	bne.n	800299a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3301      	adds	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d003      	beq.n	80029cc <HAL_CAN_GetRxMessage+0x24>
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	f040 80f3 	bne.w	8002bb2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10e      	bne.n	80029f0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d116      	bne.n	8002a0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0e7      	b.n	8002bc0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0d8      	b.n	8002bc0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	331b      	adds	r3, #27
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0204 	and.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10c      	bne.n	8002a46 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	331b      	adds	r3, #27
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4413      	add	r3, r2
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0d5b      	lsrs	r3, r3, #21
 8002a3c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e00b      	b.n	8002a5e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	331b      	adds	r3, #27
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	4413      	add	r3, r2
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	331b      	adds	r3, #27
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0202 	and.w	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	331b      	adds	r3, #27
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	4413      	add	r3, r2
 8002a80:	3304      	adds	r3, #4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	331b      	adds	r3, #27
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	331b      	adds	r3, #27
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0a1a      	lsrs	r2, r3, #8
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0c1a      	lsrs	r2, r3, #16
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3302      	adds	r3, #2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e1a      	lsrs	r2, r3, #24
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	3303      	adds	r3, #3
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	3304      	adds	r3, #4
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0a1a      	lsrs	r2, r3, #8
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3305      	adds	r3, #5
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0c1a      	lsrs	r2, r3, #16
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	3306      	adds	r3, #6
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e1a      	lsrs	r2, r3, #24
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	3307      	adds	r3, #7
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d108      	bne.n	8002b9e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	e007      	b.n	8002bae <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0220 	orr.w	r2, r2, #32
 8002bac:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e006      	b.n	8002bc0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d002      	beq.n	8002bea <HAL_CAN_ActivateNotification+0x1e>
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d109      	bne.n	8002bfe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e006      	b.n	8002c0c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d07c      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f983 	bl	8002f86 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c80:	e016      	b.n	8002cb0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	e00c      	b.n	8002cb0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca8:	e002      	b.n	8002cb0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f989 	bl	8002fc2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d024      	beq.n	8002d04 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f963 	bl	8002f9a <HAL_CAN_TxMailbox1CompleteCallback>
 8002cd4:	e016      	b.n	8002d04 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	e00c      	b.n	8002d04 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	e002      	b.n	8002d04 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f969 	bl	8002fd6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d024      	beq.n	8002d58 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f943 	bl	8002fae <HAL_CAN_TxMailbox2CompleteCallback>
 8002d28:	e016      	b.n	8002d58 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e00c      	b.n	8002d58 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	e002      	b.n	8002d58 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f949 	bl	8002fea <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f930 	bl	8002ffe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fc7a 	bl	80016b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2210      	movs	r2, #16
 8002dde:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2208      	movs	r2, #8
 8002dfa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f912 	bl	8003026 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8f9 	bl	8003012 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8fc 	bl	800303a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8f5 	bl	800304e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d07b      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d072      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d043      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d03e      	beq.n	8002f5e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee6:	2b60      	cmp	r3, #96	; 0x60
 8002ee8:	d02b      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x32a>
 8002eea:	2b60      	cmp	r3, #96	; 0x60
 8002eec:	d82e      	bhi.n	8002f4c <HAL_CAN_IRQHandler+0x334>
 8002eee:	2b50      	cmp	r3, #80	; 0x50
 8002ef0:	d022      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x320>
 8002ef2:	2b50      	cmp	r3, #80	; 0x50
 8002ef4:	d82a      	bhi.n	8002f4c <HAL_CAN_IRQHandler+0x334>
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d019      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x316>
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d826      	bhi.n	8002f4c <HAL_CAN_IRQHandler+0x334>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d010      	beq.n	8002f24 <HAL_CAN_IRQHandler+0x30c>
 8002f02:	2b30      	cmp	r3, #48	; 0x30
 8002f04:	d822      	bhi.n	8002f4c <HAL_CAN_IRQHandler+0x334>
 8002f06:	2b10      	cmp	r3, #16
 8002f08:	d002      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x2f8>
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d005      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f0e:	e01d      	b.n	8002f4c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	f043 0308 	orr.w	r3, r3, #8
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f18:	e019      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f22:	e014      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	f043 0320 	orr.w	r3, r3, #32
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2c:	e00f      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f36:	e00a      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f40:	e005      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f4a:	e000      	b.n	8002f4e <HAL_CAN_IRQHandler+0x336>
            break;
 8002f4c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f5c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f872 	bl	8003062 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	; 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4907      	ldr	r1, [pc, #28]	; (8003114 <__NVIC_EnableIRQ+0x38>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	; (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	; (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43d9      	mvns	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	4313      	orrs	r3, r2
         );
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f8:	f7ff ff8e 	bl	8003118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff29 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff3e 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff8e 	bl	800316c <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5d 	bl	8003118 <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff31 	bl	80030dc <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <SysTick_Config>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff f842 	bl	8002330 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e099      	b.n	80033ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d8:	e00f      	b.n	80032fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032da:	f7ff f829 	bl	8002330 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d908      	bls.n	80032fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e078      	b.n	80033ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e8      	bne.n	80032da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_DMA_Init+0x158>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003326:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800333e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b04      	cmp	r3, #4
 8003352:	d107      	bne.n	8003364 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f023 0307 	bic.w	r3, r3, #7
 800337a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2b04      	cmp	r3, #4
 800338c:	d117      	bne.n	80033be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00e      	beq.n	80033be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa6f 	bl	8003884 <DMA_CheckFifoParam>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ba:	2301      	movs	r3, #1
 80033bc:	e016      	b.n	80033ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa26 	bl	8003818 <DMA_CalcBaseAndBitshift>
 80033cc:	4603      	mov	r3, r0
 80033ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	409a      	lsls	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	f010803f 	.word	0xf010803f

080033f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_DMA_Start_IT+0x26>
 800341a:	2302      	movs	r3, #2
 800341c:	e040      	b.n	80034a0 <HAL_DMA_Start_IT+0xa8>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d12f      	bne.n	8003492 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2202      	movs	r2, #2
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f9b8 	bl	80037bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	223f      	movs	r2, #63	; 0x3f
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0216 	orr.w	r2, r2, #22
 8003466:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0208 	orr.w	r2, r2, #8
 800347e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e005      	b.n	800349e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800349a:	2302      	movs	r3, #2
 800349c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034b4:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_DMA_IRQHandler+0x258>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a92      	ldr	r2, [pc, #584]	; (8003704 <HAL_DMA_IRQHandler+0x25c>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0a9b      	lsrs	r3, r3, #10
 80034c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2208      	movs	r2, #8
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01a      	beq.n	8003514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	2208      	movs	r2, #8
 8003502:	409a      	lsls	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003536:	2201      	movs	r2, #1
 8003538:	409a      	lsls	r2, r3
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	2204      	movs	r2, #4
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356c:	2204      	movs	r2, #4
 800356e:	409a      	lsls	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2210      	movs	r2, #16
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d043      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a2:	2210      	movs	r2, #16
 80035a4:	409a      	lsls	r2, r3
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d018      	beq.n	80035ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d024      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
 80035d6:	e01f      	b.n	8003618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
 80035e8:	e016      	b.n	8003618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0208 	bic.w	r2, r2, #8
 8003606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2220      	movs	r2, #32
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 808e 	beq.w	8003746 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8086 	beq.w	8003746 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	2220      	movs	r2, #32
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b05      	cmp	r3, #5
 8003650:	d136      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0216 	bic.w	r2, r2, #22
 8003660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_DMA_IRQHandler+0x1da>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0208 	bic.w	r2, r2, #8
 8003690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	223f      	movs	r2, #63	; 0x3f
 8003698:	409a      	lsls	r2, r3
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d07d      	beq.n	80037b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
        }
        return;
 80036be:	e078      	b.n	80037b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d01c      	beq.n	8003708 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d030      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4798      	blx	r3
 80036ec:	e02b      	b.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d027      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
 80036fe:	e022      	b.n	8003746 <HAL_DMA_IRQHandler+0x29e>
 8003700:	20000000 	.word	0x20000000
 8003704:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0210 	bic.w	r2, r2, #16
 8003724:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d022      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2205      	movs	r2, #5
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3301      	adds	r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	429a      	cmp	r2, r3
 800377c:	d307      	bcc.n	800378e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f2      	bne.n	8003772 <HAL_DMA_IRQHandler+0x2ca>
 800378c:	e000      	b.n	8003790 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800378e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
 80037b0:	e000      	b.n	80037b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037b2:	bf00      	nop
    }
  }
}
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d108      	bne.n	80037fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037fa:	e007      	b.n	800380c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3b10      	subs	r3, #16
 8003828:	4a14      	ldr	r2, [pc, #80]	; (800387c <DMA_CalcBaseAndBitshift+0x64>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <DMA_CalcBaseAndBitshift+0x68>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d909      	bls.n	800385a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	659a      	str	r2, [r3, #88]	; 0x58
 8003858:	e007      	b.n	800386a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	aaaaaaab 	.word	0xaaaaaaab
 8003880:	080058b4 	.word	0x080058b4

08003884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11f      	bne.n	80038de <DMA_CheckFifoParam+0x5a>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d856      	bhi.n	8003952 <DMA_CheckFifoParam+0xce>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <DMA_CheckFifoParam+0x28>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038bd 	.word	0x080038bd
 80038b0:	080038cf 	.word	0x080038cf
 80038b4:	080038bd 	.word	0x080038bd
 80038b8:	08003953 	.word	0x08003953
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d046      	beq.n	8003956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e043      	b.n	8003956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038d6:	d140      	bne.n	800395a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e03d      	b.n	800395a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e6:	d121      	bne.n	800392c <DMA_CheckFifoParam+0xa8>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d837      	bhi.n	800395e <DMA_CheckFifoParam+0xda>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <DMA_CheckFifoParam+0x70>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003905 	.word	0x08003905
 80038f8:	0800390b 	.word	0x0800390b
 80038fc:	08003905 	.word	0x08003905
 8003900:	0800391d 	.word	0x0800391d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
      break;
 8003908:	e030      	b.n	800396c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d025      	beq.n	8003962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800391a:	e022      	b.n	8003962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003924:	d11f      	bne.n	8003966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800392a:	e01c      	b.n	8003966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d903      	bls.n	800393a <DMA_CheckFifoParam+0xb6>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d003      	beq.n	8003940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003938:	e018      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
      break;
 800393e:	e015      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      break;
 8003950:	e00b      	b.n	800396a <DMA_CheckFifoParam+0xe6>
      break;
 8003952:	bf00      	nop
 8003954:	e00a      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e008      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
 800395c:	e006      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
 8003960:	e004      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 8003962:	bf00      	nop
 8003964:	e002      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;   
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <DMA_CheckFifoParam+0xe8>
      break;
 800396a:	bf00      	nop
    }
  } 
  
  return status; 
 800396c:	7bfb      	ldrb	r3, [r7, #15]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e177      	b.n	8003c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003998:	2201      	movs	r2, #1
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f040 8166 	bne.w	8003c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d005      	beq.n	80039ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d130      	bne.n	8003a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a04:	2201      	movs	r2, #1
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 0201 	and.w	r2, r3, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d017      	beq.n	8003a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2203      	movs	r2, #3
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d123      	bne.n	8003ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	220f      	movs	r2, #15
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	08da      	lsrs	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3208      	adds	r2, #8
 8003aba:	69b9      	ldr	r1, [r7, #24]
 8003abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0203 	and.w	r2, r3, #3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80c0 	beq.w	8003c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4a65      	ldr	r2, [pc, #404]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b10:	6453      	str	r3, [r2, #68]	; 0x44
 8003b12:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_GPIO_Init+0x324>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_GPIO_Init+0x328>)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	220f      	movs	r2, #15
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a58      	ldr	r2, [pc, #352]	; (8003ca8 <HAL_GPIO_Init+0x32c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d037      	beq.n	8003bba <HAL_GPIO_Init+0x23e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	; (8003cac <HAL_GPIO_Init+0x330>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_GPIO_Init+0x23a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_GPIO_Init+0x334>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02b      	beq.n	8003bb2 <HAL_GPIO_Init+0x236>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a55      	ldr	r2, [pc, #340]	; (8003cb4 <HAL_GPIO_Init+0x338>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d025      	beq.n	8003bae <HAL_GPIO_Init+0x232>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_GPIO_Init+0x33c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01f      	beq.n	8003baa <HAL_GPIO_Init+0x22e>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a53      	ldr	r2, [pc, #332]	; (8003cbc <HAL_GPIO_Init+0x340>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d019      	beq.n	8003ba6 <HAL_GPIO_Init+0x22a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_GPIO_Init+0x344>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_GPIO_Init+0x226>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a51      	ldr	r2, [pc, #324]	; (8003cc4 <HAL_GPIO_Init+0x348>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00d      	beq.n	8003b9e <HAL_GPIO_Init+0x222>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a50      	ldr	r2, [pc, #320]	; (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <HAL_GPIO_Init+0x21e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ccc <HAL_GPIO_Init+0x350>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d101      	bne.n	8003b96 <HAL_GPIO_Init+0x21a>
 8003b92:	2309      	movs	r3, #9
 8003b94:	e012      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b96:	230a      	movs	r3, #10
 8003b98:	e010      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	e00e      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003b9e:	2307      	movs	r3, #7
 8003ba0:	e00c      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00a      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e008      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003baa:	2304      	movs	r3, #4
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e004      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e002      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x240>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f002 0203 	and.w	r2, r2, #3
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	4093      	lsls	r3, r2
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bcc:	4935      	ldr	r1, [pc, #212]	; (8003ca4 <HAL_GPIO_Init+0x328>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bfe:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c04:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <HAL_GPIO_Init+0x354>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	f67f ae84 	bls.w	8003998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3724      	adds	r7, #36	; 0x24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40013800 	.word	0x40013800
 8003ca8:	40020000 	.word	0x40020000
 8003cac:	40020400 	.word	0x40020400
 8003cb0:	40020800 	.word	0x40020800
 8003cb4:	40020c00 	.word	0x40020c00
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40021400 	.word	0x40021400
 8003cc0:	40021800 	.word	0x40021800
 8003cc4:	40021c00 	.word	0x40021c00
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40022400 	.word	0x40022400
 8003cd0:	40013c00 	.word	0x40013c00

08003cd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_PWREx_EnableOverDrive+0x90>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <HAL_PWREx_EnableOverDrive+0x94>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fe fb16 	bl	8002330 <HAL_GetTick>
 8003d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d06:	e009      	b.n	8003d1c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d08:	f7fe fb12 	bl	8002330 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d16:	d901      	bls.n	8003d1c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e01f      	b.n	8003d5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d1ee      	bne.n	8003d08 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d30:	f7fe fafe 	bl	8002330 <HAL_GetTick>
 8003d34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d36:	e009      	b.n	8003d4c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d38:	f7fe fafa 	bl	8002330 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d46:	d901      	bls.n	8003d4c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e007      	b.n	8003d5c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d58:	d1ee      	bne.n	8003d38 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40023800 	.word	0x40023800
 8003d68:	420e0040 	.word	0x420e0040
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	420e0044 	.word	0x420e0044

08003d74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e264      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d075      	beq.n	8003e7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d92:	4ba3      	ldr	r3, [pc, #652]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d00c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9e:	4ba0      	ldr	r3, [pc, #640]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d112      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003daa:	4b9d      	ldr	r3, [pc, #628]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	4b99      	ldr	r3, [pc, #612]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d05b      	beq.n	8003e7c <HAL_RCC_OscConfig+0x108>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d157      	bne.n	8003e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e23f      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d106      	bne.n	8003de8 <HAL_RCC_OscConfig+0x74>
 8003dda:	4b91      	ldr	r3, [pc, #580]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a90      	ldr	r2, [pc, #576]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e01d      	b.n	8003e24 <HAL_RCC_OscConfig+0xb0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x98>
 8003df2:	4b8b      	ldr	r3, [pc, #556]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a8a      	ldr	r2, [pc, #552]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_OscConfig+0xb0>
 8003e0c:	4b84      	ldr	r3, [pc, #528]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a83      	ldr	r2, [pc, #524]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b81      	ldr	r3, [pc, #516]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a80      	ldr	r2, [pc, #512]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d013      	beq.n	8003e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fa80 	bl	8002330 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e34:	f7fe fa7c 	bl	8002330 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e204      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0xc0>
 8003e52:	e014      	b.n	8003e7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fe fa6c 	bl	8002330 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe fa68 	bl	8002330 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1f0      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	4b6c      	ldr	r3, [pc, #432]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0xe8>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d063      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e96:	4b62      	ldr	r3, [pc, #392]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d11c      	bne.n	8003edc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ea2:	4b5f      	ldr	r3, [pc, #380]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d116      	bne.n	8003edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x152>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e1c4      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec6:	4b56      	ldr	r3, [pc, #344]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4952      	ldr	r1, [pc, #328]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	e03a      	b.n	8003f52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d020      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee4:	4b4f      	ldr	r3, [pc, #316]	; (8004024 <HAL_RCC_OscConfig+0x2b0>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fe fa21 	bl	8002330 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fa1d 	bl	8002330 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e1a5      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	4b46      	ldr	r3, [pc, #280]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f10:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4940      	ldr	r1, [pc, #256]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
 8003f24:	e015      	b.n	8003f52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_OscConfig+0x2b0>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fa00 	bl	8002330 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe f9fc 	bl	8002330 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e184      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d030      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d016      	beq.n	8003f94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f66:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x2b4>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fe f9e0 	bl	8002330 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f74:	f7fe f9dc 	bl	8002330 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e164      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	4b26      	ldr	r3, [pc, #152]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x200>
 8003f92:	e015      	b.n	8003fc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x2b4>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f9c9 	bl	8002330 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fe f9c5 	bl	8002330 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e14d      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a0 	beq.w	800410e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd2:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a0e      	ldr	r2, [pc, #56]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_RCC_OscConfig+0x2b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004006:	2b00      	cmp	r3, #0
 8004008:	d121      	bne.n	800404e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400a:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_RCC_OscConfig+0x2b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a07      	ldr	r2, [pc, #28]	; (800402c <HAL_RCC_OscConfig+0x2b8>)
 8004010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004016:	f7fe f98b 	bl	8002330 <HAL_GetTick>
 800401a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	e011      	b.n	8004042 <HAL_RCC_OscConfig+0x2ce>
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	42470000 	.word	0x42470000
 8004028:	42470e80 	.word	0x42470e80
 800402c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fe f97e 	bl	8002330 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e106      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b85      	ldr	r3, [pc, #532]	; (8004258 <HAL_RCC_OscConfig+0x4e4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d106      	bne.n	8004064 <HAL_RCC_OscConfig+0x2f0>
 8004056:	4b81      	ldr	r3, [pc, #516]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6713      	str	r3, [r2, #112]	; 0x70
 8004062:	e01c      	b.n	800409e <HAL_RCC_OscConfig+0x32a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d10c      	bne.n	8004086 <HAL_RCC_OscConfig+0x312>
 800406c:	4b7b      	ldr	r3, [pc, #492]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	4a7a      	ldr	r2, [pc, #488]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004072:	f043 0304 	orr.w	r3, r3, #4
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
 8004078:	4b78      	ldr	r3, [pc, #480]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a77      	ldr	r2, [pc, #476]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	e00b      	b.n	800409e <HAL_RCC_OscConfig+0x32a>
 8004086:	4b75      	ldr	r3, [pc, #468]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	4a74      	ldr	r2, [pc, #464]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	; 0x70
 8004092:	4b72      	ldr	r3, [pc, #456]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	4a71      	ldr	r2, [pc, #452]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d015      	beq.n	80040d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a6:	f7fe f943 	bl	8002330 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	e00a      	b.n	80040c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fe f93f 	bl	8002330 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0c5      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ee      	beq.n	80040ae <HAL_RCC_OscConfig+0x33a>
 80040d0:	e014      	b.n	80040fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7fe f92d 	bl	8002330 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fe f929 	bl	8002330 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0af      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ee      	bne.n	80040da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d105      	bne.n	800410e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004102:	4b56      	ldr	r3, [pc, #344]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a55      	ldr	r2, [pc, #340]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 8004108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 809b 	beq.w	800424e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004118:	4b50      	ldr	r3, [pc, #320]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d05c      	beq.n	80041de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d141      	bne.n	80041b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b4c      	ldr	r3, [pc, #304]	; (8004260 <HAL_RCC_OscConfig+0x4ec>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fe f8fd 	bl	8002330 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fe f8f9 	bl	8002330 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e081      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414c:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	019b      	lsls	r3, r3, #6
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	061b      	lsls	r3, r3, #24
 800417c:	4937      	ldr	r1, [pc, #220]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_OscConfig+0x4ec>)
 8004184:	2201      	movs	r2, #1
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe f8d2 	bl	8002330 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe f8ce 	bl	8002330 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e056      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x41c>
 80041ae:	e04e      	b.n	800424e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCC_OscConfig+0x4ec>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b6:	f7fe f8bb 	bl	8002330 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041be:	f7fe f8b7 	bl	8002330 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e03f      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f0      	bne.n	80041be <HAL_RCC_OscConfig+0x44a>
 80041dc:	e037      	b.n	800424e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e032      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HAL_RCC_OscConfig+0x4e8>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d028      	beq.n	800424a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d121      	bne.n	800424a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d11a      	bne.n	800424a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800421a:	4013      	ands	r3, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004220:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004222:	4293      	cmp	r3, r2
 8004224:	d111      	bne.n	800424a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	3b01      	subs	r3, #1
 8004234:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d107      	bne.n	800424a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40007000 	.word	0x40007000
 800425c:	40023800 	.word	0x40023800
 8004260:	42470060 	.word	0x42470060

08004264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0cc      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b68      	ldr	r3, [pc, #416]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d90c      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b65      	ldr	r3, [pc, #404]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b8      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b8:	4b59      	ldr	r3, [pc, #356]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a58      	ldr	r2, [pc, #352]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d0:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4a52      	ldr	r2, [pc, #328]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b50      	ldr	r3, [pc, #320]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	494d      	ldr	r1, [pc, #308]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d044      	beq.n	8004384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d003      	beq.n	8004322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e06f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e067      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b37      	ldr	r3, [pc, #220]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4934      	ldr	r1, [pc, #208]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004354:	f7fd ffec 	bl	8002330 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fd ffe8 	bl	8002330 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e04f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d20c      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b20      	ldr	r3, [pc, #128]	; (800441c <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e032      	b.n	8004412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b8:	4b19      	ldr	r3, [pc, #100]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4916      	ldr	r1, [pc, #88]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	490e      	ldr	r1, [pc, #56]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ea:	f000 f821 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	490a      	ldr	r1, [pc, #40]	; (8004424 <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a09      	ldr	r2, [pc, #36]	; (8004428 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004406:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fd ff4c 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023c00 	.word	0x40023c00
 8004420:	40023800 	.word	0x40023800
 8004424:	0800589c 	.word	0x0800589c
 8004428:	20000000 	.word	0x20000000
 800442c:	20000004 	.word	0x20000004

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b5b0      	push	{r4, r5, r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004436:	2100      	movs	r1, #0
 8004438:	6079      	str	r1, [r7, #4]
 800443a:	2100      	movs	r1, #0
 800443c:	60f9      	str	r1, [r7, #12]
 800443e:	2100      	movs	r1, #0
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004442:	2100      	movs	r1, #0
 8004444:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004446:	4952      	ldr	r1, [pc, #328]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 8004448:	6889      	ldr	r1, [r1, #8]
 800444a:	f001 010c 	and.w	r1, r1, #12
 800444e:	2908      	cmp	r1, #8
 8004450:	d00d      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x3e>
 8004452:	2908      	cmp	r1, #8
 8004454:	f200 8094 	bhi.w	8004580 <HAL_RCC_GetSysClockFreq+0x150>
 8004458:	2900      	cmp	r1, #0
 800445a:	d002      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x32>
 800445c:	2904      	cmp	r1, #4
 800445e:	d003      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x38>
 8004460:	e08e      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004462:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCC_GetSysClockFreq+0x164>)
 8004464:	60bb      	str	r3, [r7, #8]
       break;
 8004466:	e08e      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_RCC_GetSysClockFreq+0x168>)
 800446a:	60bb      	str	r3, [r7, #8]
      break;
 800446c:	e08b      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446e:	4948      	ldr	r1, [pc, #288]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 8004470:	6849      	ldr	r1, [r1, #4]
 8004472:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004476:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004478:	4945      	ldr	r1, [pc, #276]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 800447a:	6849      	ldr	r1, [r1, #4]
 800447c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004480:	2900      	cmp	r1, #0
 8004482:	d024      	beq.n	80044ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004484:	4942      	ldr	r1, [pc, #264]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 8004486:	6849      	ldr	r1, [r1, #4]
 8004488:	0989      	lsrs	r1, r1, #6
 800448a:	4608      	mov	r0, r1
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004494:	f04f 0500 	mov.w	r5, #0
 8004498:	ea00 0204 	and.w	r2, r0, r4
 800449c:	ea01 0305 	and.w	r3, r1, r5
 80044a0:	493d      	ldr	r1, [pc, #244]	; (8004598 <HAL_RCC_GetSysClockFreq+0x168>)
 80044a2:	fb01 f003 	mul.w	r0, r1, r3
 80044a6:	2100      	movs	r1, #0
 80044a8:	fb01 f102 	mul.w	r1, r1, r2
 80044ac:	1844      	adds	r4, r0, r1
 80044ae:	493a      	ldr	r1, [pc, #232]	; (8004598 <HAL_RCC_GetSysClockFreq+0x168>)
 80044b0:	fba2 0101 	umull	r0, r1, r2, r1
 80044b4:	1863      	adds	r3, r4, r1
 80044b6:	4619      	mov	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f7fc f9ca 	bl	8000858 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4613      	mov	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e04a      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	099b      	lsrs	r3, r3, #6
 80044d4:	461a      	mov	r2, r3
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044de:	f04f 0100 	mov.w	r1, #0
 80044e2:	ea02 0400 	and.w	r4, r2, r0
 80044e6:	ea03 0501 	and.w	r5, r3, r1
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	014b      	lsls	r3, r1, #5
 80044f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044fc:	0142      	lsls	r2, r0, #5
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	1b00      	subs	r0, r0, r4
 8004504:	eb61 0105 	sbc.w	r1, r1, r5
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	018b      	lsls	r3, r1, #6
 8004512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004516:	0182      	lsls	r2, r0, #6
 8004518:	1a12      	subs	r2, r2, r0
 800451a:	eb63 0301 	sbc.w	r3, r3, r1
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	00d9      	lsls	r1, r3, #3
 8004528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800452c:	00d0      	lsls	r0, r2, #3
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	1912      	adds	r2, r2, r4
 8004534:	eb45 0303 	adc.w	r3, r5, r3
 8004538:	f04f 0000 	mov.w	r0, #0
 800453c:	f04f 0100 	mov.w	r1, #0
 8004540:	0299      	lsls	r1, r3, #10
 8004542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004546:	0290      	lsls	r0, r2, #10
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	461a      	mov	r2, r3
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f7fc f97e 	bl	8000858 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4613      	mov	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_RCC_GetSysClockFreq+0x160>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	3301      	adds	r3, #1
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	60bb      	str	r3, [r7, #8]
      break;
 800457e:	e002      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <HAL_RCC_GetSysClockFreq+0x164>)
 8004582:	60bb      	str	r3, [r7, #8]
      break;
 8004584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004586:	68bb      	ldr	r3, [r7, #8]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bdb0      	pop	{r4, r5, r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	00b71b00 	.word	0x00b71b00

0800459c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000000 	.word	0x20000000

080045b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b8:	f7ff fff0 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	080058ac 	.word	0x080058ac

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045e0:	f7ff ffdc 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0b5b      	lsrs	r3, r3, #13
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	080058ac 	.word	0x080058ac

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e041      	b.n	800469a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fbfe 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fa96 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e04e      	b.n	800475a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_TIM_Base_Start_IT+0xc4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d01d      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_TIM_Base_Start_IT+0xcc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIM_Base_Start_IT+0xd0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_TIM_Base_Start_IT+0xd4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	; (800477c <HAL_TIM_Base_Start_IT+0xd8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIM_Base_Start_IT+0xdc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d122      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d11b      	bne.n	80047e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0202 	mvn.w	r2, #2
 80047b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9b5 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9a7 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f9b8 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d122      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d11b      	bne.n	8004834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0204 	mvn.w	r2, #4
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f98b 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f97d 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f98e 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d122      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d11b      	bne.n	8004888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0208 	mvn.w	r2, #8
 8004858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f961 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004874:	e005      	b.n	8004882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f953 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f964 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0210 	mvn.w	r2, #16
 80048ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2208      	movs	r2, #8
 80048b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f937 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f929 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f93a 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10e      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0201 	mvn.w	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd f970 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b80      	cmp	r3, #128	; 0x80
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fae0 	bl	8004ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494c:	2b40      	cmp	r3, #64	; 0x40
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8ff 	bl	8004b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b20      	cmp	r3, #32
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0320 	and.w	r3, r3, #32
 8004978:	2b20      	cmp	r3, #32
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0220 	mvn.w	r2, #32
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 faaa 	bl	8004ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_ConfigClockSource+0x1c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0b4      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x186>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd4>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	f000 8086 	beq.w	8004b06 <HAL_TIM_ConfigClockSource+0x172>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xa6>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x11a>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b50      	cmp	r3, #80	; 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xfa>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x13a>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f000 f9ad 	bl	8004da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f000 f996 	bl	8004da8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 f90a 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f963 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f929 	bl	8004d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f953 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 f8ea 	bl	8004cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f943 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 f93a 	bl	8004d72 <TIM_ITRx_SetConfig>
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d00f      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d027      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d023      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01f      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d017      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <TIM_Base_SetConfig+0x134>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <TIM_Base_SetConfig+0x138>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <TIM_Base_SetConfig+0x13c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800
 8004ca8:	40001800 	.word	0x40001800
 8004cac:	40001c00 	.word	0x40001c00
 8004cb0:	40002000 	.word	0x40002000

08004cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f023 0201 	bic.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 030a 	bic.w	r3, r3, #10
 8004cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b087      	sub	sp, #28
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0210 	bic.w	r2, r3, #16
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f043 0307 	orr.w	r3, r3, #7
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	021a      	lsls	r2, r3, #8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	609a      	str	r2, [r3, #8]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e05a      	b.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4c:	d01d      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1a      	ldr	r2, [pc, #104]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a15      	ldr	r2, [pc, #84]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10c      	bne.n	8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40001800 	.word	0x40001800

08004ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e03f      	b.n	8004f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd f820 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fa97 	bl	8005480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695a      	ldr	r2, [r3, #20]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	60f8      	str	r0, [r7, #12]
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	4613      	mov	r3, r2
 8004fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d11d      	bne.n	8004ff8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_UART_Receive_DMA+0x26>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e016      	b.n	8004ffa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Receive_DMA+0x38>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e00f      	b.n	8004ffa <HAL_UART_Receive_DMA+0x58>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f920 	bl	8005234 <UART_Start_Receive_DMA>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b09c      	sub	sp, #112	; 0x70
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d172      	bne.n	8005144 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800505e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005060:	2200      	movs	r2, #0
 8005062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507a:	66bb      	str	r3, [r7, #104]	; 0x68
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005084:	65ba      	str	r2, [r7, #88]	; 0x58
 8005086:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800508a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	f023 0301 	bic.w	r3, r3, #1
 80050ae:	667b      	str	r3, [r7, #100]	; 0x64
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3314      	adds	r3, #20
 80050b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050b8:	647a      	str	r2, [r7, #68]	; 0x44
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	623b      	str	r3, [r7, #32]
   return(result);
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e2:	663b      	str	r3, [r7, #96]	; 0x60
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ec:	633a      	str	r2, [r7, #48]	; 0x30
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	2b01      	cmp	r3, #1
 800510e:	d119      	bne.n	8005144 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	e841 2300 	strex	r3, r2, [r1]
 800513c:	617b      	str	r3, [r7, #20]
   return(result);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	2b01      	cmp	r3, #1
 800514a:	d106      	bne.n	800515a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005150:	4619      	mov	r1, r3
 8005152:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005154:	f7ff ff69 	bl	800502a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005158:	e002      	b.n	8005160 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800515a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800515c:	f7fc f9aa 	bl	80014b4 <HAL_UART_RxCpltCallback>
}
 8005160:	bf00      	nop
 8005162:	3770      	adds	r7, #112	; 0x70
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	2b01      	cmp	r3, #1
 800517c:	d108      	bne.n	8005190 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005182:	085b      	lsrs	r3, r3, #1
 8005184:	b29b      	uxth	r3, r3
 8005186:	4619      	mov	r1, r3
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff4e 	bl	800502a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800518e:	e002      	b.n	8005196 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff ff36 	bl	8005002 <HAL_UART_RxHalfCpltCallback>
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b21      	cmp	r3, #33	; 0x21
 80051d0:	d108      	bne.n	80051e4 <UART_DMAError+0x46>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051de:	68b8      	ldr	r0, [r7, #8]
 80051e0:	f000 f8c2 	bl	8005368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b22      	cmp	r3, #34	; 0x22
 8005204:	d108      	bne.n	8005218 <UART_DMAError+0x7a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 f8d0 	bl	80053b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f043 0210 	orr.w	r2, r3, #16
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005224:	68b8      	ldr	r0, [r7, #8]
 8005226:	f7ff fef6 	bl	8005016 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b098      	sub	sp, #96	; 0x60
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2222      	movs	r2, #34	; 0x22
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	4a3e      	ldr	r2, [pc, #248]	; (800535c <UART_Start_Receive_DMA+0x128>)
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <UART_Start_Receive_DMA+0x12c>)
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <UART_Start_Receive_DMA+0x130>)
 8005272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	2200      	movs	r2, #0
 800527a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	f7fe f8b0 	bl	80033f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3314      	adds	r3, #20
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	657b      	str	r3, [r7, #84]	; 0x54
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800530a:	63ba      	str	r2, [r7, #56]	; 0x38
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005334:	653b      	str	r3, [r7, #80]	; 0x50
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800533e:	627a      	str	r2, [r7, #36]	; 0x24
 8005340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61fb      	str	r3, [r7, #28]
   return(result);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3760      	adds	r7, #96	; 0x60
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08005043 	.word	0x08005043
 8005360:	08005169 	.word	0x08005169
 8005364:	0800519f 	.word	0x0800519f

08005368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	61ba      	str	r2, [r7, #24]
 8005392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	613b      	str	r3, [r7, #16]
   return(result);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80053ac:	bf00      	nop
 80053ae:	3724      	adds	r7, #36	; 0x24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b095      	sub	sp, #84	; 0x54
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053e0:	643a      	str	r2, [r7, #64]	; 0x40
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	3314      	adds	r3, #20
 80053fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	61fb      	str	r3, [r7, #28]
   return(result);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f023 0301 	bic.w	r3, r3, #1
 800540a:	64bb      	str	r3, [r7, #72]	; 0x48
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800541a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	2b01      	cmp	r3, #1
 800542e:	d119      	bne.n	8005464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 0310 	bic.w	r3, r3, #16
 8005446:	647b      	str	r3, [r7, #68]	; 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005450:	61ba      	str	r2, [r7, #24]
 8005452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005454:	6979      	ldr	r1, [r7, #20]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	e841 2300 	strex	r3, r2, [r1]
 800545c:	613b      	str	r3, [r7, #16]
   return(result);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e5      	bne.n	8005430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005472:	bf00      	nop
 8005474:	3754      	adds	r7, #84	; 0x54
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005484:	b09f      	sub	sp, #124	; 0x7c
 8005486:	af00      	add	r7, sp, #0
 8005488:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005496:	68d9      	ldr	r1, [r3, #12]
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	ea40 0301 	orr.w	r3, r0, r1
 80054a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	431a      	orrs	r2, r3
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054c4:	f021 010c 	bic.w	r1, r1, #12
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ce:	430b      	orrs	r3, r1
 80054d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054de:	6999      	ldr	r1, [r3, #24]
 80054e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	ea40 0301 	orr.w	r3, r0, r1
 80054e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4bc5      	ldr	r3, [pc, #788]	; (8005804 <UART_SetConfig+0x384>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d004      	beq.n	80054fe <UART_SetConfig+0x7e>
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4bc3      	ldr	r3, [pc, #780]	; (8005808 <UART_SetConfig+0x388>)
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d103      	bne.n	8005506 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054fe:	f7ff f86d 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005502:	6778      	str	r0, [r7, #116]	; 0x74
 8005504:	e002      	b.n	800550c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005506:	f7ff f855 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 800550a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005514:	f040 80b6 	bne.w	8005684 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	461c      	mov	r4, r3
 800551c:	f04f 0500 	mov.w	r5, #0
 8005520:	4622      	mov	r2, r4
 8005522:	462b      	mov	r3, r5
 8005524:	1891      	adds	r1, r2, r2
 8005526:	6439      	str	r1, [r7, #64]	; 0x40
 8005528:	415b      	adcs	r3, r3
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005530:	1912      	adds	r2, r2, r4
 8005532:	eb45 0303 	adc.w	r3, r5, r3
 8005536:	f04f 0000 	mov.w	r0, #0
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	00d9      	lsls	r1, r3, #3
 8005540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005544:	00d0      	lsls	r0, r2, #3
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	1911      	adds	r1, r2, r4
 800554c:	6639      	str	r1, [r7, #96]	; 0x60
 800554e:	416b      	adcs	r3, r5
 8005550:	667b      	str	r3, [r7, #100]	; 0x64
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	1891      	adds	r1, r2, r2
 800555e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005560:	415b      	adcs	r3, r3
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005568:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800556c:	f7fb f974 	bl	8000858 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4ba5      	ldr	r3, [pc, #660]	; (800580c <UART_SetConfig+0x38c>)
 8005576:	fba3 2302 	umull	r2, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	011e      	lsls	r6, r3, #4
 800557e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005580:	461c      	mov	r4, r3
 8005582:	f04f 0500 	mov.w	r5, #0
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	1891      	adds	r1, r2, r2
 800558c:	6339      	str	r1, [r7, #48]	; 0x30
 800558e:	415b      	adcs	r3, r3
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005596:	1912      	adds	r2, r2, r4
 8005598:	eb45 0303 	adc.w	r3, r5, r3
 800559c:	f04f 0000 	mov.w	r0, #0
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	00d9      	lsls	r1, r3, #3
 80055a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055aa:	00d0      	lsls	r0, r2, #3
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	1911      	adds	r1, r2, r4
 80055b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80055b4:	416b      	adcs	r3, r5
 80055b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	1891      	adds	r1, r2, r2
 80055c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80055c6:	415b      	adcs	r3, r3
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80055d2:	f7fb f941 	bl	8000858 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b8c      	ldr	r3, [pc, #560]	; (800580c <UART_SetConfig+0x38c>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a87      	ldr	r2, [pc, #540]	; (800580c <UART_SetConfig+0x38c>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055fc:	441e      	add	r6, r3
 80055fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005600:	4618      	mov	r0, r3
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	1894      	adds	r4, r2, r2
 800560c:	623c      	str	r4, [r7, #32]
 800560e:	415b      	adcs	r3, r3
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005616:	1812      	adds	r2, r2, r0
 8005618:	eb41 0303 	adc.w	r3, r1, r3
 800561c:	f04f 0400 	mov.w	r4, #0
 8005620:	f04f 0500 	mov.w	r5, #0
 8005624:	00dd      	lsls	r5, r3, #3
 8005626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800562a:	00d4      	lsls	r4, r2, #3
 800562c:	4622      	mov	r2, r4
 800562e:	462b      	mov	r3, r5
 8005630:	1814      	adds	r4, r2, r0
 8005632:	653c      	str	r4, [r7, #80]	; 0x50
 8005634:	414b      	adcs	r3, r1
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	461a      	mov	r2, r3
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	1891      	adds	r1, r2, r2
 8005644:	61b9      	str	r1, [r7, #24]
 8005646:	415b      	adcs	r3, r3
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005652:	f7fb f901 	bl	8000858 <__aeabi_uldivmod>
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	4b6c      	ldr	r3, [pc, #432]	; (800580c <UART_SetConfig+0x38c>)
 800565c:	fba3 1302 	umull	r1, r3, r3, r2
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	2164      	movs	r1, #100	; 0x64
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	3332      	adds	r3, #50	; 0x32
 800566e:	4a67      	ldr	r2, [pc, #412]	; (800580c <UART_SetConfig+0x38c>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	095b      	lsrs	r3, r3, #5
 8005676:	f003 0207 	and.w	r2, r3, #7
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4432      	add	r2, r6
 8005680:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005682:	e0b9      	b.n	80057f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005686:	461c      	mov	r4, r3
 8005688:	f04f 0500 	mov.w	r5, #0
 800568c:	4622      	mov	r2, r4
 800568e:	462b      	mov	r3, r5
 8005690:	1891      	adds	r1, r2, r2
 8005692:	6139      	str	r1, [r7, #16]
 8005694:	415b      	adcs	r3, r3
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800569c:	1912      	adds	r2, r2, r4
 800569e:	eb45 0303 	adc.w	r3, r5, r3
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	00d9      	lsls	r1, r3, #3
 80056ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b0:	00d0      	lsls	r0, r2, #3
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	eb12 0804 	adds.w	r8, r2, r4
 80056ba:	eb43 0905 	adc.w	r9, r3, r5
 80056be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	008b      	lsls	r3, r1, #2
 80056d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056d6:	0082      	lsls	r2, r0, #2
 80056d8:	4640      	mov	r0, r8
 80056da:	4649      	mov	r1, r9
 80056dc:	f7fb f8bc 	bl	8000858 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <UART_SetConfig+0x38c>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011e      	lsls	r6, r3, #4
 80056ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056f0:	4618      	mov	r0, r3
 80056f2:	f04f 0100 	mov.w	r1, #0
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	1894      	adds	r4, r2, r2
 80056fc:	60bc      	str	r4, [r7, #8]
 80056fe:	415b      	adcs	r3, r3
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005706:	1812      	adds	r2, r2, r0
 8005708:	eb41 0303 	adc.w	r3, r1, r3
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	f04f 0500 	mov.w	r5, #0
 8005714:	00dd      	lsls	r5, r3, #3
 8005716:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800571a:	00d4      	lsls	r4, r2, #3
 800571c:	4622      	mov	r2, r4
 800571e:	462b      	mov	r3, r5
 8005720:	1814      	adds	r4, r2, r0
 8005722:	64bc      	str	r4, [r7, #72]	; 0x48
 8005724:	414b      	adcs	r3, r1
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	f04f 0100 	mov.w	r1, #0
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	f04f 0300 	mov.w	r3, #0
 800573a:	008b      	lsls	r3, r1, #2
 800573c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005740:	0082      	lsls	r2, r0, #2
 8005742:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005746:	f7fb f887 	bl	8000858 <__aeabi_uldivmod>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4b2f      	ldr	r3, [pc, #188]	; (800580c <UART_SetConfig+0x38c>)
 8005750:	fba3 1302 	umull	r1, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	3332      	adds	r3, #50	; 0x32
 8005762:	4a2a      	ldr	r2, [pc, #168]	; (800580c <UART_SetConfig+0x38c>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800576e:	441e      	add	r6, r3
 8005770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005772:	4618      	mov	r0, r3
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	1894      	adds	r4, r2, r2
 800577e:	603c      	str	r4, [r7, #0]
 8005780:	415b      	adcs	r3, r3
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005788:	1812      	adds	r2, r2, r0
 800578a:	eb41 0303 	adc.w	r3, r1, r3
 800578e:	f04f 0400 	mov.w	r4, #0
 8005792:	f04f 0500 	mov.w	r5, #0
 8005796:	00dd      	lsls	r5, r3, #3
 8005798:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800579c:	00d4      	lsls	r4, r2, #3
 800579e:	4622      	mov	r2, r4
 80057a0:	462b      	mov	r3, r5
 80057a2:	eb12 0a00 	adds.w	sl, r2, r0
 80057a6:	eb43 0b01 	adc.w	fp, r3, r1
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f04f 0100 	mov.w	r1, #0
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	008b      	lsls	r3, r1, #2
 80057be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057c2:	0082      	lsls	r2, r0, #2
 80057c4:	4650      	mov	r0, sl
 80057c6:	4659      	mov	r1, fp
 80057c8:	f7fb f846 	bl	8000858 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <UART_SetConfig+0x38c>)
 80057d2:	fba3 1302 	umull	r1, r3, r3, r2
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2164      	movs	r1, #100	; 0x64
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	3332      	adds	r3, #50	; 0x32
 80057e4:	4a09      	ldr	r2, [pc, #36]	; (800580c <UART_SetConfig+0x38c>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	f003 020f 	and.w	r2, r3, #15
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4432      	add	r2, r6
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	377c      	adds	r7, #124	; 0x7c
 80057fc:	46bd      	mov	sp, r7
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	bf00      	nop
 8005804:	40011000 	.word	0x40011000
 8005808:	40011400 	.word	0x40011400
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	4d0d      	ldr	r5, [pc, #52]	; (8005848 <__libc_init_array+0x38>)
 8005814:	4c0d      	ldr	r4, [pc, #52]	; (800584c <__libc_init_array+0x3c>)
 8005816:	1b64      	subs	r4, r4, r5
 8005818:	10a4      	asrs	r4, r4, #2
 800581a:	2600      	movs	r6, #0
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	4d0b      	ldr	r5, [pc, #44]	; (8005850 <__libc_init_array+0x40>)
 8005822:	4c0c      	ldr	r4, [pc, #48]	; (8005854 <__libc_init_array+0x44>)
 8005824:	f000 f82e 	bl	8005884 <_init>
 8005828:	1b64      	subs	r4, r4, r5
 800582a:	10a4      	asrs	r4, r4, #2
 800582c:	2600      	movs	r6, #0
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f855 3b04 	ldr.w	r3, [r5], #4
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	080058c4 	.word	0x080058c4
 800584c:	080058c4 	.word	0x080058c4
 8005850:	080058c4 	.word	0x080058c4
 8005854:	080058c8 	.word	0x080058c8

08005858 <memcpy>:
 8005858:	440a      	add	r2, r1
 800585a:	4291      	cmp	r1, r2
 800585c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005860:	d100      	bne.n	8005864 <memcpy+0xc>
 8005862:	4770      	bx	lr
 8005864:	b510      	push	{r4, lr}
 8005866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800586a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586e:	4291      	cmp	r1, r2
 8005870:	d1f9      	bne.n	8005866 <memcpy+0xe>
 8005872:	bd10      	pop	{r4, pc}

08005874 <memset>:
 8005874:	4402      	add	r2, r0
 8005876:	4603      	mov	r3, r0
 8005878:	4293      	cmp	r3, r2
 800587a:	d100      	bne.n	800587e <memset+0xa>
 800587c:	4770      	bx	lr
 800587e:	f803 1b01 	strb.w	r1, [r3], #1
 8005882:	e7f9      	b.n	8005878 <memset+0x4>

08005884 <_init>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr

08005890 <_fini>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr
