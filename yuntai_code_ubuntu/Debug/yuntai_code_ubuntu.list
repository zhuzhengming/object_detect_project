
yuntai_code_ubuntu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d94  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f68  08004f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08004f7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08004f7c  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c790  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  0003c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025756  00000000  00000000  00041b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015143  00000000  00000000  000672b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db327  00000000  00000000  0007c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  00157774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004f28 	.word	0x08004f28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004f28 	.word	0x08004f28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <GM6020_Init>:

GM6020_t h6020s[7];
float posRef = 60.0f;

void GM6020_Init(void) 
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	for(int i =0; i<7; i++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e06c      	b.n	80005ca <GM6020_Init+0xe6>
			// h6020s[i].posPID.KP = 40.0f;
	// 		h6020s[i].posPID.outputMax = 60;

	// 		h6020s[i].encoder_resolution = 8192.0f;

		h6020s[i].speedPID.KP = 15;
 80004f0:	493b      	ldr	r1, [pc, #236]	; (80005e0 <GM6020_Init+0xfc>)
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4613      	mov	r3, r2
 80004f6:	015b      	lsls	r3, r3, #5
 80004f8:	4413      	add	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	440b      	add	r3, r1
 80004fe:	3334      	adds	r3, #52	; 0x34
 8000500:	4a38      	ldr	r2, [pc, #224]	; (80005e4 <GM6020_Init+0x100>)
 8000502:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.KI = 1;
 8000504:	4936      	ldr	r1, [pc, #216]	; (80005e0 <GM6020_Init+0xfc>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4613      	mov	r3, r2
 800050a:	015b      	lsls	r3, r3, #5
 800050c:	4413      	add	r3, r2
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	440b      	add	r3, r1
 8000512:	3338      	adds	r3, #56	; 0x38
 8000514:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000518:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.KD = 1;
 800051a:	4931      	ldr	r1, [pc, #196]	; (80005e0 <GM6020_Init+0xfc>)
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4613      	mov	r3, r2
 8000520:	015b      	lsls	r3, r3, #5
 8000522:	4413      	add	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	333c      	adds	r3, #60	; 0x3c
 800052a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800052e:	601a      	str	r2, [r3, #0]
        h6020s[i].speedPID.outputMax = 6000;
 8000530:	492b      	ldr	r1, [pc, #172]	; (80005e0 <GM6020_Init+0xfc>)
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4613      	mov	r3, r2
 8000536:	015b      	lsls	r3, r3, #5
 8000538:	4413      	add	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	440b      	add	r3, r1
 800053e:	3358      	adds	r3, #88	; 0x58
 8000540:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <GM6020_Init+0x104>)
 8000542:	601a      	str	r2, [r3, #0]

        h6020s[i].posPID.KP = 50.0f;
 8000544:	4926      	ldr	r1, [pc, #152]	; (80005e0 <GM6020_Init+0xfc>)
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	4613      	mov	r3, r2
 800054a:	015b      	lsls	r3, r3, #5
 800054c:	4413      	add	r3, r2
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	440b      	add	r3, r1
 8000552:	335c      	adds	r3, #92	; 0x5c
 8000554:	4a25      	ldr	r2, [pc, #148]	; (80005ec <GM6020_Init+0x108>)
 8000556:	601a      	str	r2, [r3, #0]
        h6020s[i].posPID.KI = 0;
 8000558:	4921      	ldr	r1, [pc, #132]	; (80005e0 <GM6020_Init+0xfc>)
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4613      	mov	r3, r2
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	4413      	add	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	440b      	add	r3, r1
 8000566:	3360      	adds	r3, #96	; 0x60
 8000568:	f04f 0200 	mov.w	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
        h6020s[i].posPID.KD =0;
 800056e:	491c      	ldr	r1, [pc, #112]	; (80005e0 <GM6020_Init+0xfc>)
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4613      	mov	r3, r2
 8000574:	015b      	lsls	r3, r3, #5
 8000576:	4413      	add	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	3364      	adds	r3, #100	; 0x64
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
        h6020s[i].posPID.outputMax = 1500;
 8000584:	4916      	ldr	r1, [pc, #88]	; (80005e0 <GM6020_Init+0xfc>)
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	4613      	mov	r3, r2
 800058a:	015b      	lsls	r3, r3, #5
 800058c:	4413      	add	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3380      	adds	r3, #128	; 0x80
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <GM6020_Init+0x10c>)
 8000596:	601a      	str	r2, [r3, #0]

		h6020s[i].reductionRate = 1.0f;
 8000598:	4911      	ldr	r1, [pc, #68]	; (80005e0 <GM6020_Init+0xfc>)
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	4613      	mov	r3, r2
 800059e:	015b      	lsls	r3, r3, #5
 80005a0:	4413      	add	r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	440b      	add	r3, r1
 80005a6:	332c      	adds	r3, #44	; 0x2c
 80005a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80005ac:	601a      	str	r2, [r3, #0]
		h6020s[i].encoder_resolution = 8192.0f;
 80005ae:	490c      	ldr	r1, [pc, #48]	; (80005e0 <GM6020_Init+0xfc>)
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4613      	mov	r3, r2
 80005b4:	015b      	lsls	r3, r3, #5
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	440b      	add	r3, r1
 80005bc:	3330      	adds	r3, #48	; 0x30
 80005be:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80005c2:	601a      	str	r2, [r3, #0]
	for(int i =0; i<7; i++)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	dd8f      	ble.n	80004f0 <GM6020_Init+0xc>

	}
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	41700000 	.word	0x41700000
 80005e8:	45bb8000 	.word	0x45bb8000
 80005ec:	42480000 	.word	0x42480000
 80005f0:	44bb8000 	.word	0x44bb8000

080005f4 <P_Calc>:

static uint32_t TxMailbox;

void P_Calc(PID_t *pid){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	pid->cur_error = pid->ref - pid->fdb;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	edd3 7a03 	vldr	s15, [r3, #12]
 8000608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->output = pid->KP * pid->cur_error;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	ed93 7a00 	vldr	s14, [r3]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	edd3 7a05 	vldr	s15, [r3, #20]
 800061e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	edc3 7a08 	vstr	s15, [r3, #32]
	/*设定输出上限*/
	if(pid->output > pid->outputMax) pid->output = pid->outputMax;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	ed93 7a08 	vldr	s14, [r3, #32]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063c:	dd03      	ble.n	8000646 <P_Calc+0x52>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	621a      	str	r2, [r3, #32]
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	ed93 7a08 	vldr	s14, [r3, #32]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000652:	eef1 7a67 	vneg.f32	s15, s15
 8000656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800065a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800065e:	d400      	bmi.n	8000662 <P_Calc+0x6e>

}
 8000660:	e007      	b.n	8000672 <P_Calc+0x7e>
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000668:	eef1 7a67 	vneg.f32	s15, s15
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <PID_Calc>:

void PID_Calc(PID_t *pid)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	pid->cur_error = pid->ref - pid->fdb;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	ed93 7a04 	vldr	s14, [r3, #16]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->output += pid->KP * (pid->cur_error - pid->error[1]) + pid->KI * pid->cur_error + pid->KD * (pid->cur_error - 2 * pid->error[1] + pid->error[0]);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	ed93 7a08 	vldr	s14, [r3, #32]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	edd3 6a00 	vldr	s13, [r3]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	ed93 6a05 	vldr	s12, [r3, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80006b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80006b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	ed93 6a01 	vldr	s12, [r3, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80006c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	ed93 6a02 	vldr	s12, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	edd3 5a05 	vldr	s11, [r3, #20]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	edd3 7a07 	vldr	s15, [r3, #28]
 80006e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006e6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80006f0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80006f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80006fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->error[0] = pid->error[1];
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	619a      	str	r2, [r3, #24]
	pid->error[1] = pid->ref - pid->fdb;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	ed93 7a04 	vldr	s14, [r3, #16]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	edd3 7a03 	vldr	s15, [r3, #12]
 800071a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	edc3 7a07 	vstr	s15, [r3, #28]
	/*设定输出上限*/
	if(pid->output > pid->outputMax) pid->output = pid->outputMax;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	ed93 7a08 	vldr	s14, [r3, #32]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	dd03      	ble.n	8000742 <PID_Calc+0xc4>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	621a      	str	r2, [r3, #32]
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	ed93 7a08 	vldr	s14, [r3, #32]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800074e:	eef1 7a67 	vneg.f32	s15, s15
 8000752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d400      	bmi.n	800075e <PID_Calc+0xe0>

}
 800075c:	e007      	b.n	800076e <PID_Calc+0xf0>
	if(pid->output < -pid->outputMax) pid->output = -pid->outputMax;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000764:	eef1 7a67 	vneg.f32	s15, s15
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <CanTransmit_GM6020_1234>:

void CanTransmit_GM6020_1234(CAN_HandleTypeDef *hcanx, int16_t cm1_iq, int16_t cm2_iq, int16_t cm3_iq, int16_t cm4_iq){
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	4608      	mov	r0, r1
 8000786:	4611      	mov	r1, r2
 8000788:	461a      	mov	r2, r3
 800078a:	4603      	mov	r3, r0
 800078c:	817b      	strh	r3, [r7, #10]
 800078e:	460b      	mov	r3, r1
 8000790:	813b      	strh	r3, [r7, #8]
 8000792:	4613      	mov	r3, r2
 8000794:	80fb      	strh	r3, [r7, #6]
	CAN_TxHeaderTypeDef TxMessage;
		
	TxMessage.DLC=0x08;
 8000796:	2308      	movs	r3, #8
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.StdId=0x1FF;
 800079a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800079e:	61bb      	str	r3, [r7, #24]
	TxMessage.IDE=CAN_ID_STD;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
	TxMessage.RTR=CAN_RTR_DATA;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t TxData[8];
	TxData[0] = (uint8_t)(cm1_iq >> 8);
 80007a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007ac:	121b      	asrs	r3, r3, #8
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	743b      	strb	r3, [r7, #16]
	TxData[1] = (uint8_t)cm1_iq;
 80007b4:	897b      	ldrh	r3, [r7, #10]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	747b      	strb	r3, [r7, #17]
	TxData[2] = (uint8_t)(cm2_iq >> 8);
 80007ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007be:	121b      	asrs	r3, r3, #8
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	74bb      	strb	r3, [r7, #18]
	TxData[3] = (uint8_t)cm2_iq;
 80007c6:	893b      	ldrh	r3, [r7, #8]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	74fb      	strb	r3, [r7, #19]
	TxData[4] = (uint8_t)(cm3_iq >> 8);
 80007cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d0:	121b      	asrs	r3, r3, #8
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	753b      	strb	r3, [r7, #20]
	TxData[5] = (uint8_t)cm3_iq;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	757b      	strb	r3, [r7, #21]
	TxData[6] = (uint8_t)(cm4_iq >> 8);
 80007de:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80007e2:	121b      	asrs	r3, r3, #8
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	75bb      	strb	r3, [r7, #22]
	TxData[7] = (uint8_t)cm4_iq;
 80007ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	75fb      	strb	r3, [r7, #23]

	
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0) ;
 80007f0:	bf00      	nop
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f001 fbf5 	bl	8001fe2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f9      	beq.n	80007f2 <CanTransmit_GM6020_1234+0x76>
	if(HAL_CAN_AddTxMessage(hcanx,&TxMessage,TxData,&TxMailbox)!=HAL_OK)
 80007fe:	f107 0210 	add.w	r2, r7, #16
 8000802:	f107 0118 	add.w	r1, r7, #24
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <CanTransmit_GM6020_1234+0xa4>)
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f001 fb0f 	bl	8001e2c <HAL_CAN_AddTxMessage>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <CanTransmit_GM6020_1234+0x9c>
	{
		 Error_Handler();       //如果CAN信息发送失败则进入死循环
 8000814:	f000 fd38 	bl	8001288 <Error_Handler>
	}
}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	; 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000028 	.word	0x20000028

08000824 <get_dji_offset>:
    if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, TxData, &TxMailbox) != HAL_OK) {
        Error_Handler();       //如果CAN信息发送失败则进入死循环
    }
}

void get_dji_offset(GM6020_t *motor, uint8_t* fdbData){
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	motor->FdbData.RotorAngle_0_360 = (fdbData[0]<<8|fdbData[1])*360.0f/motor->encoder_resolution;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	3201      	adds	r2, #1
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	4313      	orrs	r3, r2
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000844:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000880 <get_dji_offset+0x5c>
 8000848:	ee67 6a87 	vmul.f32	s13, s15, s14
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->Calculate.RotorAngle_0_360_Log[1] = motor->FdbData.RotorAngle_0_360; 
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	619a      	str	r2, [r3, #24]
	motor->Calculate.RotorAngle_0_360_Log[NOW] = motor->Calculate.RotorAngle_0_360_Log[LAST];
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	619a      	str	r2, [r3, #24]

	motor->Calculate.RotorAngle_0_360_OffSet = motor->FdbData.RotorAngle_0_360;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	61da      	str	r2, [r3, #28]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	43b40000 	.word	0x43b40000

08000884 <GM6020_CanMsgDecode>:


HAL_StatusTypeDef GM6020_CanMsgDecode(uint32_t stdid,uint8_t *fdbData) 
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
    int id =stdid-0x205;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8000894:	60fb      	str	r3, [r7, #12]
    if( id>=0 && id<7 ){
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db2f      	blt.n	80008fc <GM6020_CanMsgDecode+0x78>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b06      	cmp	r3, #6
 80008a0:	dc2c      	bgt.n	80008fc <GM6020_CanMsgDecode+0x78>
        // GM6020_Update(id, fdbData);
		
		if(h6020s[id].FdbData.msg_cnt<50)
 80008a2:	4919      	ldr	r1, [pc, #100]	; (8000908 <GM6020_CanMsgDecode+0x84>)
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4613      	mov	r3, r2
 80008a8:	015b      	lsls	r3, r3, #5
 80008aa:	4413      	add	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b31      	cmp	r3, #49	; 0x31
 80008b4:	dc1c      	bgt.n	80008f0 <GM6020_CanMsgDecode+0x6c>
		{
			get_dji_offset(&h6020s[id], fdbData);
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	4613      	mov	r3, r2
 80008ba:	015b      	lsls	r3, r3, #5
 80008bc:	4413      	add	r3, r2
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <GM6020_CanMsgDecode+0x84>)
 80008c2:	4413      	add	r3, r2
 80008c4:	6839      	ldr	r1, [r7, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffac 	bl	8000824 <get_dji_offset>
			h6020s[id].FdbData.msg_cnt++;
 80008cc:	490e      	ldr	r1, [pc, #56]	; (8000908 <GM6020_CanMsgDecode+0x84>)
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4613      	mov	r3, r2
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	1c59      	adds	r1, r3, #1
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <GM6020_CanMsgDecode+0x84>)
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4613      	mov	r3, r2
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4403      	add	r3, r0
 80008ec:	6019      	str	r1, [r3, #0]
 80008ee:	e003      	b.n	80008f8 <GM6020_CanMsgDecode+0x74>
		}
		else
		{
			GM6020_Update(id, fdbData);
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f000 f80a 	bl	800090c <GM6020_Update>
		}
        return HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e000      	b.n	80008fe <GM6020_CanMsgDecode+0x7a>
    }

    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000002c 	.word	0x2000002c

0800090c <GM6020_Update>:

void GM6020_Update(int id, uint8_t *fdbData) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	//static int last_tick[7];
	//static int ave_cnt[7];
	/*  反馈信息计算  */
	h6020s[id].FdbData.RotorAngle_0_360 = (fdbData[0] << 8 | fdbData[1]) * 360.0f
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	3201      	adds	r2, #1
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	4313      	orrs	r3, r2
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800092c:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8000c48 <GM6020_Update+0x33c>
 8000930:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ h6020s[id].encoder_resolution; /* unit:degree*/
 8000934:	49c5      	ldr	r1, [pc, #788]	; (8000c4c <GM6020_Update+0x340>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	015b      	lsls	r3, r3, #5
 800093c:	4413      	add	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3330      	adds	r3, #48	; 0x30
 8000944:	ed93 7a00 	vldr	s14, [r3]
 8000948:	eec6 7a87 	vdiv.f32	s15, s13, s14
	h6020s[id].FdbData.RotorAngle_0_360 = (fdbData[0] << 8 | fdbData[1]) * 360.0f
 800094c:	49bf      	ldr	r1, [pc, #764]	; (8000c4c <GM6020_Update+0x340>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4613      	mov	r3, r2
 8000952:	015b      	lsls	r3, r3, #5
 8000954:	4413      	add	r3, r2
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	440b      	add	r3, r1
 800095a:	3304      	adds	r3, #4
 800095c:	edc3 7a00 	vstr	s15, [r3]
    h6020s[id].FdbData.rpm = (int16_t)(fdbData[2] << 8 | fdbData[3]);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	3302      	adds	r3, #2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	3303      	adds	r3, #3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097e:	49b3      	ldr	r1, [pc, #716]	; (8000c4c <GM6020_Update+0x340>)
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	4613      	mov	r3, r2
 8000984:	015b      	lsls	r3, r3, #5
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3308      	adds	r3, #8
 800098e:	edc3 7a00 	vstr	s15, [r3]
    h6020s[id].FdbData.current = (fdbData[4] << 8 | fdbData[5]);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	3304      	adds	r3, #4
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	3205      	adds	r2, #5
 800099e:	7812      	ldrb	r2, [r2, #0]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009aa:	49a8      	ldr	r1, [pc, #672]	; (8000c4c <GM6020_Update+0x340>)
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4613      	mov	r3, r2
 80009b0:	015b      	lsls	r3, r3, #5
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	330c      	adds	r3, #12
 80009ba:	edc3 7a00 	vstr	s15, [r3]

	/*  更新反馈速度/位置  */
	h6020s[id].Calculate.RotorAngle_0_360_Log[LAST]  =   h6020s[id].Calculate.RotorAngle_0_360_Log[NOW];
 80009be:	49a3      	ldr	r1, [pc, #652]	; (8000c4c <GM6020_Update+0x340>)
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4613      	mov	r3, r2
 80009c4:	015b      	lsls	r3, r3, #5
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3318      	adds	r3, #24
 80009ce:	6819      	ldr	r1, [r3, #0]
 80009d0:	489e      	ldr	r0, [pc, #632]	; (8000c4c <GM6020_Update+0x340>)
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4613      	mov	r3, r2
 80009d6:	015b      	lsls	r3, r3, #5
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4403      	add	r3, r0
 80009de:	3314      	adds	r3, #20
 80009e0:	6019      	str	r1, [r3, #0]
	h6020s[id].Calculate.RotorAngle_0_360_Log[NOW]   =   h6020s[id].FdbData.RotorAngle_0_360;
 80009e2:	499a      	ldr	r1, [pc, #616]	; (8000c4c <GM6020_Update+0x340>)
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4613      	mov	r3, r2
 80009e8:	015b      	lsls	r3, r3, #5
 80009ea:	4413      	add	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	440b      	add	r3, r1
 80009f0:	3304      	adds	r3, #4
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	4895      	ldr	r0, [pc, #596]	; (8000c4c <GM6020_Update+0x340>)
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4403      	add	r3, r0
 8000a02:	3318      	adds	r3, #24
 8000a04:	6019      	str	r1, [r3, #0]
	
	/* 电机圈数更新        */
	if(h6020s[id].Calculate.RotorAngle_0_360_Log[NOW] -  h6020s[id].Calculate.RotorAngle_0_360_Log[LAST] > (180.0))
 8000a06:	4991      	ldr	r1, [pc, #580]	; (8000c4c <GM6020_Update+0x340>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	015b      	lsls	r3, r3, #5
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3318      	adds	r3, #24
 8000a16:	ed93 7a00 	vldr	s14, [r3]
 8000a1a:	498c      	ldr	r1, [pc, #560]	; (8000c4c <GM6020_Update+0x340>)
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	015b      	lsls	r3, r3, #5
 8000a22:	4413      	add	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	440b      	add	r3, r1
 8000a28:	3314      	adds	r3, #20
 8000a2a:	edd3 7a00 	vldr	s15, [r3]
 8000a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a32:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000c50 <GM6020_Update+0x344>
 8000a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3e:	dd13      	ble.n	8000a68 <GM6020_Update+0x15c>
		h6020s[id].Calculate.RotorRound--;
 8000a40:	4982      	ldr	r1, [pc, #520]	; (8000c4c <GM6020_Update+0x340>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4613      	mov	r3, r2
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3320      	adds	r3, #32
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1e59      	subs	r1, r3, #1
 8000a54:	487d      	ldr	r0, [pc, #500]	; (8000c4c <GM6020_Update+0x340>)
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	015b      	lsls	r3, r3, #5
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4403      	add	r3, r0
 8000a62:	3320      	adds	r3, #32
 8000a64:	6019      	str	r1, [r3, #0]
 8000a66:	e02f      	b.n	8000ac8 <GM6020_Update+0x1bc>
	else if(h6020s[id].Calculate.RotorAngle_0_360_Log[NOW] - h6020s[id].Calculate.RotorAngle_0_360_Log[LAST] < -(180.0))
 8000a68:	4978      	ldr	r1, [pc, #480]	; (8000c4c <GM6020_Update+0x340>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	015b      	lsls	r3, r3, #5
 8000a70:	4413      	add	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	3318      	adds	r3, #24
 8000a78:	ed93 7a00 	vldr	s14, [r3]
 8000a7c:	4973      	ldr	r1, [pc, #460]	; (8000c4c <GM6020_Update+0x340>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4613      	mov	r3, r2
 8000a82:	015b      	lsls	r3, r3, #5
 8000a84:	4413      	add	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a94:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000c54 <GM6020_Update+0x348>
 8000a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa0:	d512      	bpl.n	8000ac8 <GM6020_Update+0x1bc>
		h6020s[id].Calculate.RotorRound++;
 8000aa2:	496a      	ldr	r1, [pc, #424]	; (8000c4c <GM6020_Update+0x340>)
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	015b      	lsls	r3, r3, #5
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3320      	adds	r3, #32
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	1c59      	adds	r1, r3, #1
 8000ab6:	4865      	ldr	r0, [pc, #404]	; (8000c4c <GM6020_Update+0x340>)
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	015b      	lsls	r3, r3, #5
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	4403      	add	r3, r0
 8000ac4:	3320      	adds	r3, #32
 8000ac6:	6019      	str	r1, [r3, #0]

	/* 电机输出轴角度      */
	h6020s[id].AxisData.AxisAngle_inDegree  =  h6020s[id].Calculate.RotorRound * 360.0f ;
 8000ac8:	4960      	ldr	r1, [pc, #384]	; (8000c4c <GM6020_Update+0x340>)
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	015b      	lsls	r3, r3, #5
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3320      	adds	r3, #32
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8000c48 <GM6020_Update+0x33c>
 8000ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aea:	4958      	ldr	r1, [pc, #352]	; (8000c4c <GM6020_Update+0x340>)
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	4613      	mov	r3, r2
 8000af0:	015b      	lsls	r3, r3, #5
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	440b      	add	r3, r1
 8000af8:	3324      	adds	r3, #36	; 0x24
 8000afa:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].AxisData.AxisAngle_inDegree  += h6020s[id].Calculate.RotorAngle_0_360_Log[0] - h6020s[id].Calculate.RotorAngle_0_360_OffSet;
 8000afe:	4953      	ldr	r1, [pc, #332]	; (8000c4c <GM6020_Update+0x340>)
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	015b      	lsls	r3, r3, #5
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	3324      	adds	r3, #36	; 0x24
 8000b0e:	ed93 7a00 	vldr	s14, [r3]
 8000b12:	494e      	ldr	r1, [pc, #312]	; (8000c4c <GM6020_Update+0x340>)
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	015b      	lsls	r3, r3, #5
 8000b1a:	4413      	add	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	3314      	adds	r3, #20
 8000b22:	edd3 6a00 	vldr	s13, [r3]
 8000b26:	4949      	ldr	r1, [pc, #292]	; (8000c4c <GM6020_Update+0x340>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	440b      	add	r3, r1
 8000b34:	331c      	adds	r3, #28
 8000b36:	edd3 7a00 	vldr	s15, [r3]
 8000b3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b42:	4942      	ldr	r1, [pc, #264]	; (8000c4c <GM6020_Update+0x340>)
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	015b      	lsls	r3, r3, #5
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	440b      	add	r3, r1
 8000b50:	3324      	adds	r3, #36	; 0x24
 8000b52:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].AxisData.AxisAngle_inDegree  /= h6020s[id].reductionRate; 
 8000b56:	493d      	ldr	r1, [pc, #244]	; (8000c4c <GM6020_Update+0x340>)
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	015b      	lsls	r3, r3, #5
 8000b5e:	4413      	add	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	3324      	adds	r3, #36	; 0x24
 8000b66:	edd3 6a00 	vldr	s13, [r3]
 8000b6a:	4938      	ldr	r1, [pc, #224]	; (8000c4c <GM6020_Update+0x340>)
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	015b      	lsls	r3, r3, #5
 8000b72:	4413      	add	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	332c      	adds	r3, #44	; 0x2c
 8000b7a:	ed93 7a00 	vldr	s14, [r3]
 8000b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b82:	4932      	ldr	r1, [pc, #200]	; (8000c4c <GM6020_Update+0x340>)
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	015b      	lsls	r3, r3, #5
 8000b8a:	4413      	add	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	440b      	add	r3, r1
 8000b90:	3324      	adds	r3, #36	; 0x24
 8000b92:	edc3 7a00 	vstr	s15, [r3]

	h6020s[id].AxisData.AxisVelocity        =  h6020s[id].FdbData.rpm / h6020s[id].reductionRate;
 8000b96:	492d      	ldr	r1, [pc, #180]	; (8000c4c <GM6020_Update+0x340>)
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	3308      	adds	r3, #8
 8000ba6:	edd3 6a00 	vldr	s13, [r3]
 8000baa:	4928      	ldr	r1, [pc, #160]	; (8000c4c <GM6020_Update+0x340>)
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	015b      	lsls	r3, r3, #5
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	332c      	adds	r3, #44	; 0x2c
 8000bba:	ed93 7a00 	vldr	s14, [r3]
 8000bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc2:	4922      	ldr	r1, [pc, #136]	; (8000c4c <GM6020_Update+0x340>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	015b      	lsls	r3, r3, #5
 8000bca:	4413      	add	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	440b      	add	r3, r1
 8000bd0:	3328      	adds	r3, #40	; 0x28
 8000bd2:	edc3 7a00 	vstr	s15, [r3]
	h6020s[id].Calculate.RotorAngle_all		  =  h6020s[id].Calculate.RotorRound * 360 + h6020s[id].Calculate.RotorAngle_0_360_Log[0] - h6020s[id].Calculate.RotorAngle_0_360_OffSet;
 8000bd6:	491d      	ldr	r1, [pc, #116]	; (8000c4c <GM6020_Update+0x340>)
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	015b      	lsls	r3, r3, #5
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	3320      	adds	r3, #32
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	ee07 3a90 	vmov	s15, r3
 8000bf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf8:	4914      	ldr	r1, [pc, #80]	; (8000c4c <GM6020_Update+0x340>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	440b      	add	r3, r1
 8000c06:	3314      	adds	r3, #20
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c10:	490e      	ldr	r1, [pc, #56]	; (8000c4c <GM6020_Update+0x340>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	015b      	lsls	r3, r3, #5
 8000c18:	4413      	add	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	331c      	adds	r3, #28
 8000c20:	edd3 7a00 	vldr	s15, [r3]
 8000c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c28:	4908      	ldr	r1, [pc, #32]	; (8000c4c <GM6020_Update+0x340>)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3310      	adds	r3, #16
 8000c38:	edc3 7a00 	vstr	s15, [r3]


}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	43b40000 	.word	0x43b40000
 8000c4c:	2000002c 	.word	0x2000002c
 8000c50:	43340000 	.word	0x43340000
 8000c54:	c3340000 	.word	0xc3340000

08000c58 <GM6020_ctrl>:


void GM6020_ctrl(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af02      	add	r7, sp, #8

		for(int i = 0; i <2;i++){
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e03c      	b.n	8000cde <GM6020_ctrl+0x86>
		//h6020s[i].posPID.fdb = h6020s[i].FdbData.RotorAngle_0_360;
        //h6020s[i].posPID.ref = posRef;
        P_Calc(&h6020s[i].posPID);
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	015b      	lsls	r3, r3, #5
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	3358      	adds	r3, #88	; 0x58
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000c72:	4413      	add	r3, r2
 8000c74:	3304      	adds	r3, #4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fcbc 	bl	80005f4 <P_Calc>
		h6020s[i].speedPID.ref = h6020s[1].posPID.output;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000c7e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	015b      	lsls	r3, r3, #5
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4403      	add	r3, r0
 8000c90:	3344      	adds	r3, #68	; 0x44
 8000c92:	6019      	str	r1, [r3, #0]


        // h6020s[1].speedPID.fdb = h6020s[1].FdbData.rpm;
		// h6020s[1].speedPID.ref = posRef;

        PID_Calc(&h6020s[i].speedPID);
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	015b      	lsls	r3, r3, #5
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	3330      	adds	r3, #48	; 0x30
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fce9 	bl	800067e <PID_Calc>

        CanTransmit_GM6020_1234(&hcan1,
                             h6020s[0].speedPID.output,
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000cae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
        CanTransmit_GM6020_1234(&hcan1,
 8000cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	b219      	sxth	r1, r3
                             h6020s[1].speedPID.output,
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <GM6020_ctrl+0x98>)
 8000cbe:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
        CanTransmit_GM6020_1234(&hcan1,
 8000cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc6:	ee17 3a90 	vmov	r3, s15
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <GM6020_ctrl+0x9c>)
 8000cd4:	f7ff fd52 	bl	800077c <CanTransmit_GM6020_1234>
		for(int i = 0; i <2;i++){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	ddbf      	ble.n	8000c64 <GM6020_ctrl+0xc>
                             0,
                             0);
        }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000002c 	.word	0x2000002c
 8000cf4:	200003c8 	.word	0x200003c8

08000cf8 <Joy_Decode>:
    }
    return crc;
}

void Joy_Decode(void)
{
 8000cf8:	b490      	push	{r4, r7}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
    for (int i = 0; i < JOY_BAG_LENGTH; i++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
 8000d02:	e01f      	b.n	8000d44 <Joy_Decode+0x4c>
        Joy_Bag_t tempBag = *(Joy_Bag_t*) (void*) (&(joy_raw_data[i]));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <Joy_Decode+0x60>)
 8000d08:	441a      	add	r2, r3
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	6820      	ldr	r0, [r4, #0]
 8000d10:	6861      	ldr	r1, [r4, #4]
 8000d12:	68a2      	ldr	r2, [r4, #8]
 8000d14:	c307      	stmia	r3!, {r0, r1, r2}
 8000d16:	7b22      	ldrb	r2, [r4, #12]
 8000d18:	701a      	strb	r2, [r3, #0]

        if (tempBag.head[0] == JOY_HEADER_HIGH &&tempBag.head[1] == JOY_HEADER_LOW &&tempBag.state==OK)
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2bff      	cmp	r3, #255	; 0xff
 8000d1e:	d10e      	bne.n	8000d3e <Joy_Decode+0x46>
 8000d20:	7a3b      	ldrb	r3, [r7, #8]
 8000d22:	2b55      	cmp	r3, #85	; 0x55
 8000d24:	d10b      	bne.n	8000d3e <Joy_Decode+0x46>
 8000d26:	7afb      	ldrb	r3, [r7, #11]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d108      	bne.n	8000d3e <Joy_Decode+0x46>
        {
                joy_revbag = *(Joy_Bag_t*)(void*)(tempBag.raw);
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <Joy_Decode+0x64>)
 8000d2e:	461c      	mov	r4, r3
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d34:	6020      	str	r0, [r4, #0]
 8000d36:	6061      	str	r1, [r4, #4]
 8000d38:	60a2      	str	r2, [r4, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	7323      	strb	r3, [r4, #12]
    for (int i = 0; i < JOY_BAG_LENGTH; i++) {
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b0c      	cmp	r3, #12
 8000d48:	dddc      	ble.n	8000d04 <Joy_Decode+0xc>
        }
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc90      	pop	{r4, r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000049c 	.word	0x2000049c
 8000d5c:	2000051c 	.word	0x2000051c

08000d60 <IMU_Decode>:

void IMU_Decode(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	af00      	add	r7, sp, #0

    for (int i = 0; i < IMU_BAG_LENGTH; i++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	657b      	str	r3, [r7, #84]	; 0x54
 8000d6a:	e018      	b.n	8000d9e <IMU_Decode+0x3e>
        IMU_Bag_t tempBag = *(IMU_Bag_t*) (void*) (&(imu_raw_data[i]));
 8000d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <IMU_Decode+0x50>)
 8000d70:	441a      	add	r2, r3
 8000d72:	463b      	mov	r3, r7
 8000d74:	4611      	mov	r1, r2
 8000d76:	2252      	movs	r2, #82	; 0x52
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 f8bf 	bl	8004efc <memcpy>

        if (tempBag.head == IMU_HEADER &&tempBag.type == IMU_TYPE )
 8000d7e:	783b      	ldrb	r3, [r7, #0]
 8000d80:	2b5a      	cmp	r3, #90	; 0x5a
 8000d82:	d109      	bne.n	8000d98 <IMU_Decode+0x38>
 8000d84:	787b      	ldrb	r3, [r7, #1]
 8000d86:	2ba5      	cmp	r3, #165	; 0xa5
 8000d88:	d106      	bne.n	8000d98 <IMU_Decode+0x38>
        {
                imu_revbag = *(IMU_Bag_t*)(void*)(tempBag.raw);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <IMU_Decode+0x54>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2252      	movs	r2, #82	; 0x52
 8000d92:	4619      	mov	r1, r3
 8000d94:	f004 f8b2 	bl	8004efc <memcpy>
    for (int i = 0; i < IMU_BAG_LENGTH; i++) {
 8000d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8000d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da0:	2b51      	cmp	r3, #81	; 0x51
 8000da2:	dde3      	ble.n	8000d6c <IMU_Decode+0xc>
        }
    }

}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3758      	adds	r7, #88	; 0x58
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003f8 	.word	0x200003f8
 8000db4:	200004b8 	.word	0x200004b8

08000db8 <YOLO_Decode>:

void YOLO_Decode(void){
 8000db8:	b490      	push	{r4, r7}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

    for (int i = 0; i < YOLO_BAG_LENGTH; i++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	e01c      	b.n	8000dfe <YOLO_Decode+0x46>
    {
        YOLO_Bag_t tempBag = *(YOLO_Bag_t*)(void*)(&(yolo_raw_data[i]));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <YOLO_Decode+0x58>)
 8000dc8:	441a      	add	r2, r3
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4614      	mov	r4, r2
 8000dce:	6820      	ldr	r0, [r4, #0]
 8000dd0:	6861      	ldr	r1, [r4, #4]
 8000dd2:	68a2      	ldr	r2, [r4, #8]
 8000dd4:	c307      	stmia	r3!, {r0, r1, r2}
 8000dd6:	89a2      	ldrh	r2, [r4, #12]
 8000dd8:	801a      	strh	r2, [r3, #0]
        if(tempBag.head[0] == YOLO_HEADER_HIGH && tempBag.head[1] == YOLO_HEADER_LOW)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b11      	cmp	r3, #17
 8000dde:	d10b      	bne.n	8000df8 <YOLO_Decode+0x40>
 8000de0:	7a3b      	ldrb	r3, [r7, #8]
 8000de2:	2ba5      	cmp	r3, #165	; 0xa5
 8000de4:	d108      	bne.n	8000df8 <YOLO_Decode+0x40>
        {
            yolo_revbag = *(YOLO_Bag_t*)(void*)(tempBag.raw);
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <YOLO_Decode+0x5c>)
 8000de8:	461c      	mov	r4, r3
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000dee:	6020      	str	r0, [r4, #0]
 8000df0:	6061      	str	r1, [r4, #4]
 8000df2:	60a2      	str	r2, [r4, #8]
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	81a3      	strh	r3, [r4, #12]
    for (int i = 0; i < YOLO_BAG_LENGTH; i++)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2b0d      	cmp	r3, #13
 8000e02:	dddf      	ble.n	8000dc4 <YOLO_Decode+0xc>
        }
        
    }
    
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc90      	pop	{r4, r7}
 8000e0e:	4770      	bx	lr
 8000e10:	2000052c 	.word	0x2000052c
 8000e14:	2000050c 	.word	0x2000050c

08000e18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    if(huart->Instance==huart3.Instance)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_UART_RxCpltCallback+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d101      	bne.n	8000e30 <HAL_UART_RxCpltCallback+0x18>
    {
        Joy_Decode();
 8000e2c:	f7ff ff64 	bl	8000cf8 <Joy_Decode>
    }
    if(huart->Instance == huart6.Instance)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_UART_RxCpltCallback+0x44>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d101      	bne.n	8000e40 <HAL_UART_RxCpltCallback+0x28>
    {
        IMU_Decode();
 8000e3c:	f7ff ff90 	bl	8000d60 <IMU_Decode>
    }

    if(huart->Instance == huart8.Instance)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_UART_RxCpltCallback+0x48>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d101      	bne.n	8000e50 <HAL_UART_RxCpltCallback+0x38>
    {
        YOLO_Decode();
 8000e4c:	f7ff ffb4 	bl	8000db8 <YOLO_Decode>
    }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000650 	.word	0x20000650
 8000e5c:	20000738 	.word	0x20000738
 8000e60:	200006f4 	.word	0x200006f4

08000e64 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MX_CAN1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e70:	2209      	movs	r2, #9
 8000e72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e86:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_CAN1_Init+0x64>)
 8000eb4:	f000 fd9a 	bl	80019ec <HAL_CAN_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000ebe:	f000 f9e3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200003c8 	.word	0x200003c8
 8000ecc:	40006400 	.word	0x40006400

08000ed0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_CAN_MspInit+0x94>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d133      	bne.n	8000f5a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f00:	6413      	str	r3, [r2, #64]	; 0x40
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_CAN_MspInit+0x98>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <HAL_CAN_MspInit+0x9c>)
 8000f46:	f002 f86b 	bl	8003020 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2014      	movs	r0, #20
 8000f50:	f001 fcbf 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f54:	2014      	movs	r0, #20
 8000f56:	f001 fcd8 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40006400 	.word	0x40006400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <CANFilterInit>:
#include "can_app.h"

uint8_t CanReceiveData[8];

HAL_StatusTypeDef CANFilterInit(CAN_HandleTypeDef* hcan){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f80:	2301      	movs	r3, #1
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  sFilterConfig.FilterIdHigh = 0x0000;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterIdLow = 0x0000;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterActivation = ENABLE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sFilterConfig.SlaveStartFilterBank = 14;
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
	
  if(HAL_CAN_ConfigFilter(hcan, &sFilterConfig) != HAL_OK)
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fe1c 	bl	8001be4 <HAL_CAN_ConfigFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <CANFilterInit+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f969 	bl	8001288 <Error_Handler>
  }

  if (HAL_CAN_Start(hcan) != HAL_OK)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fef4 	bl	8001da4 <HAL_CAN_Start>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <CANFilterInit+0x56>
  {
    Error_Handler();
 8000fc2:	f000 f961 	bl	8001288 <Error_Handler>
  }
	
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f001 f951 	bl	8002270 <HAL_CAN_ActivateNotification>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <CANFilterInit+0x68>
  {
    Error_Handler();
 8000fd4:	f000 f958 	bl	8001288 <Error_Handler>
  }

	return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <CanDataDecode>:

void CanDataDecode(CAN_RxHeaderTypeDef RxHeader){
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	f107 0c08 	add.w	ip, r7, #8
 8000fee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

		if (RxHeader.StdId > 0x204)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8000ff8:	d904      	bls.n	8001004 <CanDataDecode+0x20>
		{
            GM6020_CanMsgDecode(RxHeader.StdId,CanReceiveData);
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <CanDataDecode+0x2c>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fc40 	bl	8000884 <GM6020_CanMsgDecode>

	
  if( RxHeader.IDE == CAN_ID_EXT ){
    // decode vesc
  }
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100c:	b004      	add	sp, #16
 800100e:	4770      	bx	lr
 8001010:	200003f0 	.word	0x200003f0

08001014 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b08f      	sub	sp, #60	; 0x3c
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CanReceiveData)
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f811 	bl	800204c <HAL_CAN_GetRxMessage>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
			!= HAL_OK) {
		Error_Handler();            //错误状态回调函敿
 8001030:	f000 f92a 	bl	8001288 <Error_Handler>
	}
    CanDataDecode(RxHeader);
 8001034:	466c      	mov	r4, sp
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800103e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001048:	f7ff ffcc 	bl	8000fe4 <CanDataDecode>
  
}
 800104c:	bf00      	nop
 800104e:	372c      	adds	r7, #44	; 0x2c
 8001050:	46bd      	mov	sp, r7
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	200003f0 	.word	0x200003f0

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_DMA_Init+0x78>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1a      	ldr	r2, [pc, #104]	; (80010d0 <MX_DMA_Init+0x78>)
 8001068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_DMA_Init+0x78>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_DMA_Init+0x78>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_DMA_Init+0x78>)
 8001084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_DMA_Init+0x78>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200c      	movs	r0, #12
 800109c:	f001 fc19 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010a0:	200c      	movs	r0, #12
 80010a2:	f001 fc32 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2011      	movs	r0, #17
 80010ac:	f001 fc11 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010b0:	2011      	movs	r0, #17
 80010b2:	f001 fc2a 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2039      	movs	r0, #57	; 0x39
 80010bc:	f001 fc09 	bl	80028d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010c0:	2039      	movs	r0, #57	; 0x39
 80010c2:	f001 fc22 	bl	800290a <HAL_NVIC_EnableIRQ>

}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_GPIO_Init+0xa0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a24      	ldr	r2, [pc, #144]	; (8001174 <MX_GPIO_Init+0xa0>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <MX_GPIO_Init+0xa0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_GPIO_Init+0xa0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <MX_GPIO_Init+0xa0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <MX_GPIO_Init+0xa0>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_GPIO_Init+0xa0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

}
 8001166:	bf00      	nop
 8001168:	371c      	adds	r7, #28
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fbc4 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f812 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f7ff ffa6 	bl	80010d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001188:	f7ff ff66 	bl	8001058 <MX_DMA_Init>
  MX_CAN1_Init();
 800118c:	f7ff fe6a 	bl	8000e64 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8001190:	f000 fa18 	bl	80015c4 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8001194:	f000 f9ec 	bl	8001570 <MX_USART3_UART_Init>
  MX_UART8_Init();
 8001198:	f000 f9c0 	bl	800151c <MX_UART8_Init>
  MX_TIM2_Init();
 800119c:	f000 f94a 	bl	8001434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  proj_init();
 80011a0:	f000 f886 	bl	80012b0 <proj_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <main+0x2c>
	...

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2230      	movs	r2, #48	; 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 feae 	bl	8004f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <SystemClock_Config+0xd8>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a2a      	ldr	r2, [pc, #168]	; (8001280 <SystemClock_Config+0xd8>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <SystemClock_Config+0xd8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b25      	ldr	r3, [pc, #148]	; (8001284 <SystemClock_Config+0xdc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <SystemClock_Config+0xdc>)
 80011f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <SystemClock_Config+0xdc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001218:	2306      	movs	r3, #6
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800121c:	23b4      	movs	r3, #180	; 0xb4
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f8f3 	bl	8003418 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001238:	f000 f826 	bl	8001288 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800123c:	f002 f89c 	bl	8003378 <HAL_PWREx_EnableOverDrive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001246:	f000 f81f 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2105      	movs	r1, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fb4d 	bl	8003908 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001274:	f000 f808 	bl	8001288 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>

08001292 <HAL_TIM_PeriodElapsedCallback>:
//
#include "mission.h"

//中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a2:	d101      	bne.n	80012a8 <HAL_TIM_PeriodElapsedCallback+0x16>

        GM6020_ctrl();
 80012a4:	f7ff fcd8 	bl	8000c58 <GM6020_ctrl>
    }
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <proj_init>:
#include "proj_init.h"



void proj_init(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

CANFilterInit(&hcan1);
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <proj_init+0x38>)
 80012b6:	f7ff fe5b 	bl	8000f70 <CANFilterInit>
GM6020_Init();
 80012ba:	f7ff f913 	bl	80004e4 <GM6020_Init>

HAL_TIM_Base_Start_IT(&htim2);
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <proj_init+0x3c>)
 80012c0:	f002 fd42 	bl	8003d48 <HAL_TIM_Base_Start_IT>

HAL_UART_Receive_DMA(&huart3,joy_raw_data,JOY_BAG_LENGTH*2);    //joy:  uart3
 80012c4:	221a      	movs	r2, #26
 80012c6:	490a      	ldr	r1, [pc, #40]	; (80012f0 <proj_init+0x40>)
 80012c8:	480a      	ldr	r0, [pc, #40]	; (80012f4 <proj_init+0x44>)
 80012ca:	f003 f9bc 	bl	8004646 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart6, imu_raw_data, IMU_BAG_LENGTH*2 );    //imu: uart6
 80012ce:	22a4      	movs	r2, #164	; 0xa4
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <proj_init+0x48>)
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <proj_init+0x4c>)
 80012d4:	f003 f9b7 	bl	8004646 <HAL_UART_Receive_DMA>
HAL_UART_Receive_DMA(&huart8, yolo_raw_data, YOLO_BAG_LENGTH*2 );   //yolo: uart8
 80012d8:	221c      	movs	r2, #28
 80012da:	4909      	ldr	r1, [pc, #36]	; (8001300 <proj_init+0x50>)
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <proj_init+0x54>)
 80012de:	f003 f9b2 	bl	8004646 <HAL_UART_Receive_DMA>

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200003c8 	.word	0x200003c8
 80012ec:	20000548 	.word	0x20000548
 80012f0:	2000049c 	.word	0x2000049c
 80012f4:	20000650 	.word	0x20000650
 80012f8:	200003f8 	.word	0x200003f8
 80012fc:	20000738 	.word	0x20000738
 8001300:	2000052c 	.word	0x2000052c
 8001304:	200006f4 	.word	0x200006f4

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <MemManage_Handler+0x4>

0800136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136e:	e7fe      	b.n	800136e <BusFault_Handler+0x4>

08001370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <UsageFault_Handler+0x4>

08001376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 fb02 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <DMA1_Stream1_IRQHandler+0x10>)
 80013b2:	f001 fbcb 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200005f0 	.word	0x200005f0

080013c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Stream6_IRQHandler+0x10>)
 80013c6:	f001 fbc1 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000694 	.word	0x20000694

080013d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <CAN1_RX0_IRQHandler+0x10>)
 80013da:	f000 ff6f 	bl	80022bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200003c8 	.word	0x200003c8

080013e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM2_IRQHandler+0x10>)
 80013ee:	f002 fd1b 	bl	8003e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000548 	.word	0x20000548

080013fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <DMA2_Stream1_IRQHandler+0x10>)
 8001402:	f001 fba3 	bl	8002b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000590 	.word	0x20000590

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_TIM2_Init+0x98>)
 8001452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001456:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM2_Init+0x98>)
 800145a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800145e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM2_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM2_Init+0x98>)
 8001468:	f242 720f 	movw	r2, #9999	; 0x270f
 800146c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_TIM2_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM2_Init+0x98>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM2_Init+0x98>)
 800147c:	f002 fc14 	bl	8003ca8 <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001486:	f7ff feff 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM2_Init+0x98>)
 8001498:	f002 fdce 	bl	8004038 <HAL_TIM_ConfigClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014a2:	f7ff fef1 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM2_Init+0x98>)
 80014b4:	f002 ffea 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014be:	f7ff fee3 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000548 	.word	0x20000548

080014d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d115      	bne.n	800150e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_TIM_Base_MspInit+0x48>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	201c      	movs	r0, #28
 8001504:	f001 f9e5 	bl	80028d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001508:	201c      	movs	r0, #28
 800150a:	f001 f9fe 	bl	800290a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_UART8_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_UART8_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_UART8_Init+0x4c>)
 8001528:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_UART8_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_UART8_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_UART8_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_UART8_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_UART8_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_UART8_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_UART8_Init+0x4c>)
 8001554:	f003 f82a 	bl	80045ac <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff fe93 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200006f4 	.word	0x200006f4
 800156c:	40007c00 	.word	0x40007c00

08001570 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART3_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800157c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001580:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART3_UART_Init+0x4c>)
 80015a8:	f003 f800 	bl	80045ac <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f7ff fe69 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000650 	.word	0x20000650
 80015c0:	40004800 	.word	0x40004800

080015c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015ca:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_USART6_UART_Init+0x50>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART6_UART_Init+0x4c>)
 80015fc:	f002 ffd6 	bl	80045ac <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001606:	f7ff fe3f 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000738 	.word	0x20000738
 8001614:	40011400 	.word	0x40011400

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a92      	ldr	r2, [pc, #584]	; (8001880 <HAL_UART_MspInit+0x268>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d15a      	bne.n	80016f0 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b91      	ldr	r3, [pc, #580]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a90      	ldr	r2, [pc, #576]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b8e      	ldr	r3, [pc, #568]	; (8001884 <HAL_UART_MspInit+0x26c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_UART_MspInit+0x26c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a89      	ldr	r2, [pc, #548]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b87      	ldr	r3, [pc, #540]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001672:	2303      	movs	r3, #3
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167a:	2301      	movs	r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001682:	2308      	movs	r3, #8
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168a:	4619      	mov	r1, r3
 800168c:	487e      	ldr	r0, [pc, #504]	; (8001888 <HAL_UART_MspInit+0x270>)
 800168e:	f001 fcc7 	bl	8003020 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001692:	4b7e      	ldr	r3, [pc, #504]	; (800188c <HAL_UART_MspInit+0x274>)
 8001694:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <HAL_UART_MspInit+0x278>)
 8001696:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8001698:	4b7c      	ldr	r3, [pc, #496]	; (800188c <HAL_UART_MspInit+0x274>)
 800169a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800169e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_UART_MspInit+0x274>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b79      	ldr	r3, [pc, #484]	; (800188c <HAL_UART_MspInit+0x274>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <HAL_UART_MspInit+0x274>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b75      	ldr	r3, [pc, #468]	; (800188c <HAL_UART_MspInit+0x274>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_UART_MspInit+0x274>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80016c0:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_UART_MspInit+0x274>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c6:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_UART_MspInit+0x274>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_UART_MspInit+0x274>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80016d2:	486e      	ldr	r0, [pc, #440]	; (800188c <HAL_UART_MspInit+0x274>)
 80016d4:	f001 f934 	bl	8002940 <HAL_DMA_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80016de:	f7ff fdd3 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_UART_MspInit+0x274>)
 80016e6:	639a      	str	r2, [r3, #56]	; 0x38
 80016e8:	4a68      	ldr	r2, [pc, #416]	; (800188c <HAL_UART_MspInit+0x274>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80016ee:	e0c2      	b.n	8001876 <HAL_UART_MspInit+0x25e>
  else if(uartHandle->Instance==USART3)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_UART_MspInit+0x27c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d15c      	bne.n	80017b4 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a60      	ldr	r2, [pc, #384]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_UART_MspInit+0x26c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <HAL_UART_MspInit+0x26c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a59      	ldr	r2, [pc, #356]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b57      	ldr	r3, [pc, #348]	; (8001884 <HAL_UART_MspInit+0x26c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001744:	2307      	movs	r3, #7
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	4852      	ldr	r0, [pc, #328]	; (8001898 <HAL_UART_MspInit+0x280>)
 8001750:	f001 fc66 	bl	8003020 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001754:	4b51      	ldr	r3, [pc, #324]	; (800189c <HAL_UART_MspInit+0x284>)
 8001756:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_UART_MspInit+0x288>)
 8001758:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800175a:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_UART_MspInit+0x284>)
 800175c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001760:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <HAL_UART_MspInit+0x284>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_UART_MspInit+0x284>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_UART_MspInit+0x284>)
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_UART_MspInit+0x284>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177c:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_UART_MspInit+0x284>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_UART_MspInit+0x284>)
 8001784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001788:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_UART_MspInit+0x284>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_UART_MspInit+0x284>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001796:	4841      	ldr	r0, [pc, #260]	; (800189c <HAL_UART_MspInit+0x284>)
 8001798:	f001 f8d2 	bl	8002940 <HAL_DMA_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80017a2:	f7ff fd71 	bl	8001288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a3c      	ldr	r2, [pc, #240]	; (800189c <HAL_UART_MspInit+0x284>)
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
 80017ac:	4a3b      	ldr	r2, [pc, #236]	; (800189c <HAL_UART_MspInit+0x284>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017b2:	e060      	b.n	8001876 <HAL_UART_MspInit+0x25e>
  else if(uartHandle->Instance==USART6)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_UART_MspInit+0x28c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d15b      	bne.n	8001876 <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a2f      	ldr	r2, [pc, #188]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a28      	ldr	r2, [pc, #160]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_UART_MspInit+0x26c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80017f6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001808:	2308      	movs	r3, #8
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4825      	ldr	r0, [pc, #148]	; (80018a8 <HAL_UART_MspInit+0x290>)
 8001814:	f001 fc04 	bl	8003020 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_UART_MspInit+0x294>)
 800181a:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_UART_MspInit+0x298>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001820:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001824:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_UART_MspInit+0x294>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001838:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_UART_MspInit+0x294>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800184c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800185a:	4814      	ldr	r0, [pc, #80]	; (80018ac <HAL_UART_MspInit+0x294>)
 800185c:	f001 f870 	bl	8002940 <HAL_DMA_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8001866:	f7ff fd0f 	bl	8001288 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_UART_MspInit+0x294>)
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
 8001870:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_UART_MspInit+0x294>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001876:	bf00      	nop
 8001878:	3738      	adds	r7, #56	; 0x38
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40007c00 	.word	0x40007c00
 8001884:	40023800 	.word	0x40023800
 8001888:	40021000 	.word	0x40021000
 800188c:	20000694 	.word	0x20000694
 8001890:	400260a0 	.word	0x400260a0
 8001894:	40004800 	.word	0x40004800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	200005f0 	.word	0x200005f0
 80018a0:	40026028 	.word	0x40026028
 80018a4:	40011400 	.word	0x40011400
 80018a8:	40021800 	.word	0x40021800
 80018ac:	20000590 	.word	0x20000590
 80018b0:	40026428 	.word	0x40026428

080018b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ba:	490e      	ldr	r1, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018bc:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d0:	4c0b      	ldr	r4, [pc, #44]	; (8001900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018de:	f7ff fd97 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f003 fae7 	bl	8004eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e6:	f7ff fc47 	bl	8001178 <main>
  bx  lr    
 80018ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018f8:	08004f70 	.word	0x08004f70
  ldr r2, =_sbss
 80018fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001900:	20000780 	.word	0x20000780

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>
	...

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_Init+0x40>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_Init+0x40>)
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x40>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 ffc3 	bl	80028bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fce4 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 ffdb 	bl	8002926 <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001988:	f000 ffa3 	bl	80028d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	2000077c 	.word	0x2000077c

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000077c 	.word	0x2000077c

080019ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e0ed      	b.n	8001bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fa60 	bl	8000ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a20:	f7ff ffd8 	bl	80019d4 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a26:	e012      	b.n	8001a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a28:	f7ff ffd4 	bl	80019d4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	d90b      	bls.n	8001a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0c5      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e5      	beq.n	8001a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0202 	bic.w	r2, r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a6c:	f7ff ffb2 	bl	80019d4 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a72:	e012      	b.n	8001a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a74:	f7ff ffae 	bl	80019d4 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	d90b      	bls.n	8001a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e09f      	b.n	8001bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e5      	bne.n	8001a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7e5b      	ldrb	r3, [r3, #25]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e9b      	ldrb	r3, [r3, #26]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0220 	orr.w	r2, r2, #32
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0220 	bic.w	r2, r2, #32
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7edb      	ldrb	r3, [r3, #27]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0210 	bic.w	r2, r2, #16
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0210 	orr.w	r2, r2, #16
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7f5b      	ldrb	r3, [r3, #29]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	ea42 0103 	orr.w	r1, r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d003      	beq.n	8001c0a <HAL_CAN_ConfigFilter+0x26>
 8001c02:	7cfb      	ldrb	r3, [r7, #19]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	f040 80be 	bne.w	8001d86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001c0a:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001c0c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c24:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d123      	bne.n	8001cb4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3248      	adds	r2, #72	; 0x48
 8001c94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001caa:	6979      	ldr	r1, [r7, #20]
 8001cac:	3348      	adds	r3, #72	; 0x48
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d122      	bne.n	8001d02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cdc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3248      	adds	r2, #72	; 0x48
 8001ce2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf8:	6979      	ldr	r1, [r7, #20]
 8001cfa:	3348      	adds	r3, #72	; 0x48
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d1c:	e007      	b.n	8001d2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d109      	bne.n	8001d4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	401a      	ands	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001d48:	e007      	b.n	8001d5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d78:	f023 0201 	bic.w	r2, r3, #1
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e006      	b.n	8001d94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
  }
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40006400 	.word	0x40006400

08001da4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d12e      	bne.n	8001e16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fe00 	bl	80019d4 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dd6:	e012      	b.n	8001dfe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd8:	f7ff fdfc 	bl	80019d4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d90b      	bls.n	8001dfe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2205      	movs	r2, #5
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e012      	b.n	8001e24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e5      	bne.n	8001dd8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d003      	beq.n	8001e58 <HAL_CAN_AddTxMessage+0x2c>
 8001e50:	7ffb      	ldrb	r3, [r7, #31]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	f040 80b8 	bne.w	8001fc8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10a      	bne.n	8001e78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a0 	beq.w	8001fb8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	0e1b      	lsrs	r3, r3, #24
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d907      	bls.n	8001e98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e09e      	b.n	8001fd6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001eb4:	68f9      	ldr	r1, [r7, #12]
 8001eb6:	6809      	ldr	r1, [r1, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	440b      	add	r3, r1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e00f      	b.n	8001ee6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ed0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001eda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	3318      	adds	r3, #24
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	440b      	add	r3, r1
 8001ee4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3318      	adds	r3, #24
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	7d1b      	ldrb	r3, [r3, #20]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d111      	bne.n	8001f26 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3318      	adds	r3, #24
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3304      	adds	r3, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	6811      	ldr	r1, [r2, #0]
 8001f16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	3318      	adds	r3, #24
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	440b      	add	r3, r1
 8001f22:	3304      	adds	r3, #4
 8001f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3307      	adds	r3, #7
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	061a      	lsls	r2, r3, #24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3306      	adds	r3, #6
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3305      	adds	r3, #5
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4313      	orrs	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	3204      	adds	r2, #4
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	4610      	mov	r0, r2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	6811      	ldr	r1, [r2, #0]
 8001f4e:	ea43 0200 	orr.w	r2, r3, r0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3303      	adds	r3, #3
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	061a      	lsls	r2, r3, #24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	041b      	lsls	r3, r3, #16
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	4610      	mov	r0, r2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6811      	ldr	r1, [r2, #0]
 8001f84:	ea43 0200 	orr.w	r2, r3, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	4413      	add	r3, r2
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3318      	adds	r3, #24
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	440b      	add	r3, r1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e00e      	b.n	8001fd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e006      	b.n	8001fd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ff6:	7afb      	ldrb	r3, [r7, #11]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d002      	beq.n	8002002 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d11d      	bne.n	800203e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002060:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d003      	beq.n	8002070 <HAL_CAN_GetRxMessage+0x24>
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	2b02      	cmp	r3, #2
 800206c:	f040 80f3 	bne.w	8002256 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10e      	bne.n	8002094 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d116      	bne.n	80020b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0e7      	b.n	8002264 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0d8      	b.n	8002264 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	331b      	adds	r3, #27
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4413      	add	r3, r2
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0204 	and.w	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10c      	bne.n	80020ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	331b      	adds	r3, #27
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	0d5b      	lsrs	r3, r3, #21
 80020e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e00b      	b.n	8002102 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	331b      	adds	r3, #27
 80020f2:	011b      	lsls	r3, r3, #4
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	331b      	adds	r3, #27
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0202 	and.w	r2, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	331b      	adds	r3, #27
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	4413      	add	r3, r2
 8002124:	3304      	adds	r3, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	331b      	adds	r3, #27
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	b2da      	uxtb	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0a1a      	lsrs	r2, r3, #8
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	3301      	adds	r3, #1
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0c1a      	lsrs	r2, r3, #16
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3302      	adds	r3, #2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e1a      	lsrs	r2, r3, #24
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3303      	adds	r3, #3
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	3304      	adds	r3, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0a1a      	lsrs	r2, r3, #8
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3305      	adds	r3, #5
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0c1a      	lsrs	r2, r3, #16
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	3306      	adds	r3, #6
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4413      	add	r3, r2
 800221a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	0e1a      	lsrs	r2, r3, #24
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3307      	adds	r3, #7
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d108      	bne.n	8002242 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0220 	orr.w	r2, r2, #32
 800223e:	60da      	str	r2, [r3, #12]
 8002240:	e007      	b.n	8002252 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0220 	orr.w	r2, r2, #32
 8002250:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e006      	b.n	8002264 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d002      	beq.n	800228e <HAL_CAN_ActivateNotification+0x1e>
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d109      	bne.n	80022a2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6959      	ldr	r1, [r3, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e006      	b.n	80022b0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d07c      	beq.n	80023fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f983 	bl	800262a <HAL_CAN_TxMailbox0CompleteCallback>
 8002324:	e016      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
 8002338:	e00c      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e002      	b.n	8002354 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f989 	bl	8002666 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002366:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f963 	bl	800263e <HAL_CAN_TxMailbox1CompleteCallback>
 8002378:	e016      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	e00c      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e002      	b.n	80023a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f969 	bl	800267a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d024      	beq.n	80023fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f943 	bl	8002652 <HAL_CAN_TxMailbox2CompleteCallback>
 80023cc:	e016      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
 80023e0:	e00c      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e002      	b.n	80023fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f949 	bl	800268e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002416:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2210      	movs	r2, #16
 800241e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f930 	bl	80026a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe fdda 	bl	8001014 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2208      	movs	r2, #8
 800249e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f912 	bl	80026ca <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8f9 	bl	80026b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2210      	movs	r2, #16
 80024de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8fc 	bl	80026de <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2208      	movs	r2, #8
 8002500:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8f5 	bl	80026f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d07b      	beq.n	800260a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d072      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d008      	beq.n	8002538 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	2b00      	cmp	r3, #0
 8002578:	d043      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002580:	2b00      	cmp	r3, #0
 8002582:	d03e      	beq.n	8002602 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800258a:	2b60      	cmp	r3, #96	; 0x60
 800258c:	d02b      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x32a>
 800258e:	2b60      	cmp	r3, #96	; 0x60
 8002590:	d82e      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 8002592:	2b50      	cmp	r3, #80	; 0x50
 8002594:	d022      	beq.n	80025dc <HAL_CAN_IRQHandler+0x320>
 8002596:	2b50      	cmp	r3, #80	; 0x50
 8002598:	d82a      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 800259a:	2b40      	cmp	r3, #64	; 0x40
 800259c:	d019      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x316>
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d826      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 80025a2:	2b30      	cmp	r3, #48	; 0x30
 80025a4:	d010      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x30c>
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d822      	bhi.n	80025f0 <HAL_CAN_IRQHandler+0x334>
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d002      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x2f8>
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d005      	beq.n	80025be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025b2:	e01d      	b.n	80025f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025bc:	e019      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c6:	e014      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d0:	e00f      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025da:	e00a      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e4:	e005      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ee:	e000      	b.n	80025f2 <HAL_CAN_IRQHandler+0x336>
            break;
 80025f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002600:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2204      	movs	r2, #4
 8002608:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f872 	bl	8002706 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002622:	bf00      	nop
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4907      	ldr	r1, [pc, #28]	; (80027b8 <__NVIC_EnableIRQ+0x38>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	e000e100 	.word	0xe000e100

080027bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	6039      	str	r1, [r7, #0]
 80027c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	db0a      	blt.n	80027e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	490c      	ldr	r1, [pc, #48]	; (8002808 <__NVIC_SetPriority+0x4c>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	440b      	add	r3, r1
 80027e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e4:	e00a      	b.n	80027fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4908      	ldr	r1, [pc, #32]	; (800280c <__NVIC_SetPriority+0x50>)
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	3b04      	subs	r3, #4
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	440b      	add	r3, r1
 80027fa:	761a      	strb	r2, [r3, #24]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000e100 	.word	0xe000e100
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f1c3 0307 	rsb	r3, r3, #7
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf28      	it	cs
 800282e:	2304      	movcs	r3, #4
 8002830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3304      	adds	r3, #4
 8002836:	2b06      	cmp	r3, #6
 8002838:	d902      	bls.n	8002840 <NVIC_EncodePriority+0x30>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3b03      	subs	r3, #3
 800283e:	e000      	b.n	8002842 <NVIC_EncodePriority+0x32>
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43da      	mvns	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	43d9      	mvns	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	4313      	orrs	r3, r2
         );
}
 800286a:	4618      	mov	r0, r3
 800286c:	3724      	adds	r7, #36	; 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d301      	bcc.n	800288e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800288a:	2301      	movs	r3, #1
 800288c:	e00f      	b.n	80028ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <SysTick_Config+0x40>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002896:	210f      	movs	r1, #15
 8002898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800289c:	f7ff ff8e 	bl	80027bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <SysTick_Config+0x40>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a6:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SysTick_Config+0x40>)
 80028a8:	2207      	movs	r2, #7
 80028aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	e000e010 	.word	0xe000e010

080028bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff29 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e4:	f7ff ff3e 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	6978      	ldr	r0, [r7, #20]
 80028f0:	f7ff ff8e 	bl	8002810 <NVIC_EncodePriority>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff5d 	bl	80027bc <__NVIC_SetPriority>
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff31 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff f842 	bl	80019d4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e099      	b.n	8002a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297c:	e00f      	b.n	800299e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297e:	f7ff f829 	bl	80019d4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b05      	cmp	r3, #5
 800298a:	d908      	bls.n	800299e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e078      	b.n	8002a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e8      	bne.n	800297e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_DMA_Init+0x158>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4313      	orrs	r3, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0307 	bic.w	r3, r3, #7
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d117      	bne.n	8002a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00e      	beq.n	8002a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fa6f 	bl	8002f28 <DMA_CheckFifoParam>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e016      	b.n	8002a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fa26 	bl	8002ebc <DMA_CalcBaseAndBitshift>
 8002a70:	4603      	mov	r3, r0
 8002a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	223f      	movs	r2, #63	; 0x3f
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	f010803f 	.word	0xf010803f

08002a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Start_IT+0x26>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e040      	b.n	8002b44 <HAL_DMA_Start_IT+0xa8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d12f      	bne.n	8002b36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f9b8 	bl	8002e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	223f      	movs	r2, #63	; 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0216 	orr.w	r2, r2, #22
 8002b0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0201 	orr.w	r2, r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e005      	b.n	8002b42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_DMA_IRQHandler+0x258>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a92      	ldr	r2, [pc, #584]	; (8002da8 <HAL_DMA_IRQHandler+0x25c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0a9b      	lsrs	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	2208      	movs	r2, #8
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	2201      	movs	r2, #1
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f043 0202 	orr.w	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2204      	movs	r2, #4
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d012      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2204      	movs	r2, #4
 8002c12:	409a      	lsls	r2, r3
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2210      	movs	r2, #16
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d043      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03c      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c46:	2210      	movs	r2, #16
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d024      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4798      	blx	r3
 8002c7a:	e01f      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e016      	b.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0208 	bic.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 808e 	beq.w	8002dea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8086 	beq.w	8002dea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d136      	bne.n	8002d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0216 	bic.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x1da>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0208 	bic.w	r2, r2, #8
 8002d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	223f      	movs	r2, #63	; 0x3f
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07d      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
        }
        return;
 8002d62:	e078      	b.n	8002e56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01c      	beq.n	8002dac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d108      	bne.n	8002d92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d030      	beq.n	8002dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
 8002d90:	e02b      	b.n	8002dea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
 8002da2:	e022      	b.n	8002dea <HAL_DMA_IRQHandler+0x29e>
 8002da4:	20000000 	.word	0x20000000
 8002da8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0210 	bic.w	r2, r2, #16
 8002dc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d032      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d022      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d307      	bcc.n	8002e32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f2      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x2ca>
 8002e30:	e000      	b.n	8002e34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
 8002e54:	e000      	b.n	8002e58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e56:	bf00      	nop
    }
  }
}
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop

08002e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d108      	bne.n	8002ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e9e:	e007      	b.n	8002eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3b10      	subs	r3, #16
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <DMA_CalcBaseAndBitshift+0x64>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <DMA_CalcBaseAndBitshift+0x68>)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d909      	bls.n	8002efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	1d1a      	adds	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	659a      	str	r2, [r3, #88]	; 0x58
 8002efc:	e007      	b.n	8002f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	aaaaaaab 	.word	0xaaaaaaab
 8002f24:	08004f58 	.word	0x08004f58

08002f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d11f      	bne.n	8002f82 <DMA_CheckFifoParam+0x5a>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d856      	bhi.n	8002ff6 <DMA_CheckFifoParam+0xce>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <DMA_CheckFifoParam+0x28>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f73 	.word	0x08002f73
 8002f58:	08002f61 	.word	0x08002f61
 8002f5c:	08002ff7 	.word	0x08002ff7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d046      	beq.n	8002ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f70:	e043      	b.n	8002ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f7a:	d140      	bne.n	8002ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e03d      	b.n	8002ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8a:	d121      	bne.n	8002fd0 <DMA_CheckFifoParam+0xa8>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d837      	bhi.n	8003002 <DMA_CheckFifoParam+0xda>
 8002f92:	a201      	add	r2, pc, #4	; (adr r2, 8002f98 <DMA_CheckFifoParam+0x70>)
 8002f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f98:	08002fa9 	.word	0x08002fa9
 8002f9c:	08002faf 	.word	0x08002faf
 8002fa0:	08002fa9 	.word	0x08002fa9
 8002fa4:	08002fc1 	.word	0x08002fc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e030      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d025      	beq.n	8003006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbe:	e022      	b.n	8003006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fc8:	d11f      	bne.n	800300a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fce:	e01c      	b.n	800300a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d903      	bls.n	8002fde <DMA_CheckFifoParam+0xb6>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fdc:	e018      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe2:	e015      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e00b      	b.n	800300e <DMA_CheckFifoParam+0xe6>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e00a      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e008      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e006      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e004      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;   
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
    }
  } 
  
  return status; 
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	e177      	b.n	800332c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800303c:	2201      	movs	r2, #1
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	f040 8166 	bne.w	8003326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d005      	beq.n	8003072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306e:	2b02      	cmp	r3, #2
 8003070:	d130      	bne.n	80030d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2203      	movs	r2, #3
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a8:	2201      	movs	r2, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 0201 	and.w	r2, r3, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d017      	beq.n	8003110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d123      	bne.n	8003164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	08da      	lsrs	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3208      	adds	r2, #8
 8003124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	69b9      	ldr	r1, [r7, #24]
 8003160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80c0 	beq.w	8003326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b66      	ldr	r3, [pc, #408]	; (8003344 <HAL_GPIO_Init+0x324>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a65      	ldr	r2, [pc, #404]	; (8003344 <HAL_GPIO_Init+0x324>)
 80031b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_GPIO_Init+0x324>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c2:	4a61      	ldr	r2, [pc, #388]	; (8003348 <HAL_GPIO_Init+0x328>)
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a58      	ldr	r2, [pc, #352]	; (800334c <HAL_GPIO_Init+0x32c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d037      	beq.n	800325e <HAL_GPIO_Init+0x23e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a57      	ldr	r2, [pc, #348]	; (8003350 <HAL_GPIO_Init+0x330>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d031      	beq.n	800325a <HAL_GPIO_Init+0x23a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a56      	ldr	r2, [pc, #344]	; (8003354 <HAL_GPIO_Init+0x334>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02b      	beq.n	8003256 <HAL_GPIO_Init+0x236>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a55      	ldr	r2, [pc, #340]	; (8003358 <HAL_GPIO_Init+0x338>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d025      	beq.n	8003252 <HAL_GPIO_Init+0x232>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a54      	ldr	r2, [pc, #336]	; (800335c <HAL_GPIO_Init+0x33c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <HAL_GPIO_Init+0x22e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a53      	ldr	r2, [pc, #332]	; (8003360 <HAL_GPIO_Init+0x340>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d019      	beq.n	800324a <HAL_GPIO_Init+0x22a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_GPIO_Init+0x344>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x226>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a51      	ldr	r2, [pc, #324]	; (8003368 <HAL_GPIO_Init+0x348>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00d      	beq.n	8003242 <HAL_GPIO_Init+0x222>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a50      	ldr	r2, [pc, #320]	; (800336c <HAL_GPIO_Init+0x34c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_GPIO_Init+0x21e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4f      	ldr	r2, [pc, #316]	; (8003370 <HAL_GPIO_Init+0x350>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_GPIO_Init+0x21a>
 8003236:	2309      	movs	r3, #9
 8003238:	e012      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800323a:	230a      	movs	r3, #10
 800323c:	e010      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800323e:	2308      	movs	r3, #8
 8003240:	e00e      	b.n	8003260 <HAL_GPIO_Init+0x240>
 8003242:	2307      	movs	r3, #7
 8003244:	e00c      	b.n	8003260 <HAL_GPIO_Init+0x240>
 8003246:	2306      	movs	r3, #6
 8003248:	e00a      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800324a:	2305      	movs	r3, #5
 800324c:	e008      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800324e:	2304      	movs	r3, #4
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x240>
 8003252:	2303      	movs	r3, #3
 8003254:	e004      	b.n	8003260 <HAL_GPIO_Init+0x240>
 8003256:	2302      	movs	r3, #2
 8003258:	e002      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x240>
 800325e:	2300      	movs	r3, #0
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f002 0203 	and.w	r2, r2, #3
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	4093      	lsls	r3, r2
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003270:	4935      	ldr	r1, [pc, #212]	; (8003348 <HAL_GPIO_Init+0x328>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800327e:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <HAL_GPIO_Init+0x354>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a2:	4a34      	ldr	r2, [pc, #208]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032a8:	4b32      	ldr	r3, [pc, #200]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032cc:	4a29      	ldr	r2, [pc, #164]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_GPIO_Init+0x354>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_GPIO_Init+0x354>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3301      	adds	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	f67f ae84 	bls.w	800303c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40013800 	.word	0x40013800
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400
 8003354:	40020800 	.word	0x40020800
 8003358:	40020c00 	.word	0x40020c00
 800335c:	40021000 	.word	0x40021000
 8003360:	40021400 	.word	0x40021400
 8003364:	40021800 	.word	0x40021800
 8003368:	40021c00 	.word	0x40021c00
 800336c:	40022000 	.word	0x40022000
 8003370:	40022400 	.word	0x40022400
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_PWREx_EnableOverDrive+0x90>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <HAL_PWREx_EnableOverDrive+0x90>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_PWREx_EnableOverDrive+0x90>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800339e:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_PWREx_EnableOverDrive+0x94>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033a4:	f7fe fb16 	bl	80019d4 <HAL_GetTick>
 80033a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033aa:	e009      	b.n	80033c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ac:	f7fe fb12 	bl	80019d4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ba:	d901      	bls.n	80033c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e01f      	b.n	8003400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033c0:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d1ee      	bne.n	80033ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033d4:	f7fe fafe 	bl	80019d4 <HAL_GetTick>
 80033d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033da:	e009      	b.n	80033f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033dc:	f7fe fafa 	bl	80019d4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ea:	d901      	bls.n	80033f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e007      	b.n	8003400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033fc:	d1ee      	bne.n	80033dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	420e0040 	.word	0x420e0040
 8003410:	40007000 	.word	0x40007000
 8003414:	420e0044 	.word	0x420e0044

08003418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e264      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d075      	beq.n	8003522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003436:	4ba3      	ldr	r3, [pc, #652]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b04      	cmp	r3, #4
 8003440:	d00c      	beq.n	800345c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	2b08      	cmp	r3, #8
 800344c:	d112      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b9d      	ldr	r3, [pc, #628]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800345a:	d10b      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x108>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d157      	bne.n	8003520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e23f      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d106      	bne.n	800348c <HAL_RCC_OscConfig+0x74>
 800347e:	4b91      	ldr	r3, [pc, #580]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e01d      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x98>
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 80034b0:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a83      	ldr	r2, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a80      	ldr	r2, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fa80 	bl	80019d4 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe fa7c 	bl	80019d4 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e204      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0xc0>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe fa6c 	bl	80019d4 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fa68 	bl	80019d4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1f0      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0xe8>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352e:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353a:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	2b08      	cmp	r3, #8
 8003544:	d11c      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d116      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	4b5c      	ldr	r3, [pc, #368]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e1c4      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4952      	ldr	r1, [pc, #328]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	e03a      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_RCC_OscConfig+0x2b0>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe fa21 	bl	80019d4 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003596:	f7fe fa1d 	bl	80019d4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1a5      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b4:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4940      	ldr	r1, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ca:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_OscConfig+0x2b0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fa00 	bl	80019d4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d8:	f7fe f9fc 	bl	80019d4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e184      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d030      	beq.n	8003664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_OscConfig+0x2b4>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe f9e0 	bl	80019d4 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003618:	f7fe f9dc 	bl	80019d4 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e164      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x200>
 8003636:	e015      	b.n	8003664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x2b4>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe f9c9 	bl	80019d4 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003646:	f7fe f9c5 	bl	80019d4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e14d      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d121      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ba:	f7fe f98b 	bl	80019d4 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	e011      	b.n	80036e6 <HAL_RCC_OscConfig+0x2ce>
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	42470000 	.word	0x42470000
 80036cc:	42470e80 	.word	0x42470e80
 80036d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe f97e 	bl	80019d4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e106      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b85      	ldr	r3, [pc, #532]	; (80038fc <HAL_RCC_OscConfig+0x4e4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x2f0>
 80036fa:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x32a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x312>
 8003710:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x32a>
 800372a:	4b75      	ldr	r3, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a74      	ldr	r2, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fe f943 	bl	80019d4 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f93f 	bl	80019d4 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0c5      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x33a>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe f92d 	bl	80019d4 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe f929 	bl	80019d4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0af      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 809b 	beq.w	80038f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d05c      	beq.n	8003882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d141      	bne.n	8003854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe f8fd 	bl	80019d4 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f8f9 	bl	80019d4 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e081      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	4937      	ldr	r1, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f8d2 	bl	80019d4 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe f8ce 	bl	80019d4 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e056      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x41c>
 8003852:	e04e      	b.n	80038f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f8bb 	bl	80019d4 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe f8b7 	bl	80019d4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e03f      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x44a>
 8003880:	e037      	b.n	80038f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e032      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d028      	beq.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d11a      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40007000 	.word	0x40007000
 8003900:	40023800 	.word	0x40023800
 8003904:	42470060 	.word	0x42470060

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0cc      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90c      	bls.n	8003944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b8      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800397e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494d      	ldr	r1, [pc, #308]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d044      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d119      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e067      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fd ffec 	bl	80019d4 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fd ffe8 	bl	80019d4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e032      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	f000 f821 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd ff4c 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08004f40 	.word	0x08004f40
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ada:	2100      	movs	r1, #0
 8003adc:	6079      	str	r1, [r7, #4]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	60f9      	str	r1, [r7, #12]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aea:	4952      	ldr	r1, [pc, #328]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aec:	6889      	ldr	r1, [r1, #8]
 8003aee:	f001 010c 	and.w	r1, r1, #12
 8003af2:	2908      	cmp	r1, #8
 8003af4:	d00d      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3e>
 8003af6:	2908      	cmp	r1, #8
 8003af8:	f200 8094 	bhi.w	8003c24 <HAL_RCC_GetSysClockFreq+0x150>
 8003afc:	2900      	cmp	r1, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x32>
 8003b00:	2904      	cmp	r1, #4
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x38>
 8003b04:	e08e      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b08:	60bb      	str	r3, [r7, #8]
       break;
 8003b0a:	e08e      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b0e:	60bb      	str	r3, [r7, #8]
      break;
 8003b10:	e08b      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b12:	4948      	ldr	r1, [pc, #288]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b14:	6849      	ldr	r1, [r1, #4]
 8003b16:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b1a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1c:	4945      	ldr	r1, [pc, #276]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b1e:	6849      	ldr	r1, [r1, #4]
 8003b20:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d024      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	4942      	ldr	r1, [pc, #264]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2a:	6849      	ldr	r1, [r1, #4]
 8003b2c:	0989      	lsrs	r1, r1, #6
 8003b2e:	4608      	mov	r0, r1
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b38:	f04f 0500 	mov.w	r5, #0
 8003b3c:	ea00 0204 	and.w	r2, r0, r4
 8003b40:	ea01 0305 	and.w	r3, r1, r5
 8003b44:	493d      	ldr	r1, [pc, #244]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b46:	fb01 f003 	mul.w	r0, r1, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	fb01 f102 	mul.w	r1, r1, r2
 8003b50:	1844      	adds	r4, r0, r1
 8003b52:	493a      	ldr	r1, [pc, #232]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b54:	fba2 0101 	umull	r0, r1, r2, r1
 8003b58:	1863      	adds	r3, r4, r1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f7fc fb42 	bl	80001ec <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e04a      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	ea02 0400 	and.w	r4, r2, r0
 8003b8a:	ea03 0501 	and.w	r5, r3, r1
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	014b      	lsls	r3, r1, #5
 8003b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ba0:	0142      	lsls	r2, r0, #5
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	1b00      	subs	r0, r0, r4
 8003ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	018b      	lsls	r3, r1, #6
 8003bb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bba:	0182      	lsls	r2, r0, #6
 8003bbc:	1a12      	subs	r2, r2, r0
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	00d9      	lsls	r1, r3, #3
 8003bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd0:	00d0      	lsls	r0, r2, #3
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	1912      	adds	r2, r2, r4
 8003bd8:	eb45 0303 	adc.w	r3, r5, r3
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0299      	lsls	r1, r3, #10
 8003be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bea:	0290      	lsls	r0, r2, #10
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f7fc faf6 	bl	80001ec <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	3301      	adds	r3, #1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	60bb      	str	r3, [r7, #8]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c26:	60bb      	str	r3, [r7, #8]
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bdb0      	pop	{r4, r5, r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	00b71b00 	.word	0x00b71b00

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08004f50 	.word	0x08004f50

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08004f50 	.word	0x08004f50

08003ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e041      	b.n	8003d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fbfe 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 fa96 	bl	8004218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d001      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e04e      	b.n	8003dfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x80>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d111      	bne.n	8003dec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b06      	cmp	r3, #6
 8003dd8:	d010      	beq.n	8003dfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dea:	e007      	b.n	8003dfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40010000 	.word	0x40010000
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40001800 	.word	0x40001800

08003e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d122      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d11b      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0202 	mvn.w	r2, #2
 8003e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f9b5 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003e70:	e005      	b.n	8003e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9a7 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f9b8 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d122      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d11b      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0204 	mvn.w	r2, #4
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f98b 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f97d 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f98e 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d122      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d11b      	bne.n	8003f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0208 	mvn.w	r2, #8
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2204      	movs	r2, #4
 8003f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f961 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003f18:	e005      	b.n	8003f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f953 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f964 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d122      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d11b      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2208      	movs	r2, #8
 8003f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f937 	bl	80041da <HAL_TIM_IC_CaptureCallback>
 8003f6c:	e005      	b.n	8003f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f929 	bl	80041c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f93a 	bl	80041ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0201 	mvn.w	r2, #1
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd f973 	bl	8001292 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fae0 	bl	8004598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8ff 	bl	8004202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d10e      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d107      	bne.n	8004030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0220 	mvn.w	r2, #32
 8004028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 faaa 	bl	8004584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_TIM_ConfigClockSource+0x1c>
 8004050:	2302      	movs	r3, #2
 8004052:	e0b4      	b.n	80041be <HAL_TIM_ConfigClockSource+0x186>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408c:	d03e      	beq.n	800410c <HAL_TIM_ConfigClockSource+0xd4>
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	f200 8087 	bhi.w	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409a:	f000 8086 	beq.w	80041aa <HAL_TIM_ConfigClockSource+0x172>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d87f      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040a4:	2b70      	cmp	r3, #112	; 0x70
 80040a6:	d01a      	beq.n	80040de <HAL_TIM_ConfigClockSource+0xa6>
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d87b      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040ac:	2b60      	cmp	r3, #96	; 0x60
 80040ae:	d050      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x11a>
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d877      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b50      	cmp	r3, #80	; 0x50
 80040b6:	d03c      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xfa>
 80040b8:	2b50      	cmp	r3, #80	; 0x50
 80040ba:	d873      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d058      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x13a>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d86f      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b30      	cmp	r3, #48	; 0x30
 80040c6:	d064      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x15a>
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d86b      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d060      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x15a>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d867      	bhi.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d05c      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x15a>
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d05a      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x15a>
 80040dc:	e062      	b.n	80041a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f000 f9ad 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	609a      	str	r2, [r3, #8]
      break;
 800410a:	e04f      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f000 f996 	bl	800444c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800412e:	609a      	str	r2, [r3, #8]
      break;
 8004130:	e03c      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 f90a 	bl	8004358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2150      	movs	r1, #80	; 0x50
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f963 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8004150:	e02c      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	f000 f929 	bl	80043b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2160      	movs	r1, #96	; 0x60
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f953 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8004170:	e01c      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	f000 f8ea 	bl	8004358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f943 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8004190:	e00c      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f000 f93a 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 80041a2:	e003      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      break;
 80041a8:	e000      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a40      	ldr	r2, [pc, #256]	; (800432c <TIM_Base_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004236:	d00f      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00b      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3b      	ldr	r2, [pc, #236]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3a      	ldr	r2, [pc, #232]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2f      	ldr	r2, [pc, #188]	; (800432c <TIM_Base_SetConfig+0x114>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d02b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d027      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2c      	ldr	r2, [pc, #176]	; (8004330 <TIM_Base_SetConfig+0x118>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d023      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <TIM_Base_SetConfig+0x11c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <TIM_Base_SetConfig+0x120>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a29      	ldr	r2, [pc, #164]	; (800433c <TIM_Base_SetConfig+0x124>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d017      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a28      	ldr	r2, [pc, #160]	; (8004340 <TIM_Base_SetConfig+0x128>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a27      	ldr	r2, [pc, #156]	; (8004344 <TIM_Base_SetConfig+0x12c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a26      	ldr	r2, [pc, #152]	; (8004348 <TIM_Base_SetConfig+0x130>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a25      	ldr	r2, [pc, #148]	; (800434c <TIM_Base_SetConfig+0x134>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <TIM_Base_SetConfig+0x138>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <TIM_Base_SetConfig+0x13c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d108      	bne.n	80042dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a0a      	ldr	r2, [pc, #40]	; (800432c <TIM_Base_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0xf8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0c      	ldr	r2, [pc, #48]	; (800433c <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d103      	bne.n	8004318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	615a      	str	r2, [r3, #20]
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40010400 	.word	0x40010400
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800
 800434c:	40001800 	.word	0x40001800
 8004350:	40001c00 	.word	0x40001c00
 8004354:	40002000 	.word	0x40002000

08004358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0210 	bic.w	r2, r3, #16
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	f043 0307 	orr.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e05a      	b.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a21      	ldr	r2, [pc, #132]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f0:	d01d      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4313      	orrs	r3, r2
 800453e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40014000 	.word	0x40014000
 8004580:	40001800 	.word	0x40001800

08004584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e03f      	b.n	800463e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd f820 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa97 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b20      	cmp	r3, #32
 800465e:	d11d      	bne.n	800469c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_UART_Receive_DMA+0x26>
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e016      	b.n	800469e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_UART_Receive_DMA+0x38>
 800467a:	2302      	movs	r3, #2
 800467c:	e00f      	b.n	800469e <HAL_UART_Receive_DMA+0x58>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	461a      	mov	r2, r3
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f920 	bl	80048d8 <UART_Start_Receive_DMA>
 8004698:	4603      	mov	r3, r0
 800469a:	e000      	b.n	800469e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b09c      	sub	sp, #112	; 0x70
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d172      	bne.n	80047e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004704:	2200      	movs	r2, #0
 8004706:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800471e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004728:	65ba      	str	r2, [r7, #88]	; 0x58
 800472a:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800472e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e5      	bne.n	8004708 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800474c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	667b      	str	r3, [r7, #100]	; 0x64
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3314      	adds	r3, #20
 800475a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800475c:	647a      	str	r2, [r7, #68]	; 0x44
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	e853 3f00 	ldrex	r3, [r3]
 800477e:	623b      	str	r3, [r7, #32]
   return(result);
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	663b      	str	r3, [r7, #96]	; 0x60
 8004788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3314      	adds	r3, #20
 800478e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004790:	633a      	str	r2, [r7, #48]	; 0x30
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004798:	e841 2300 	strex	r3, r2, [r1]
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e5      	bne.n	8004770 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d119      	bne.n	80047e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047d4:	61fa      	str	r2, [r7, #28]
 80047d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69b9      	ldr	r1, [r7, #24]
 80047da:	69fa      	ldr	r2, [r7, #28]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	617b      	str	r3, [r7, #20]
   return(result);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047f4:	4619      	mov	r1, r3
 80047f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047f8:	f7ff ff69 	bl	80046ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047fc:	e002      	b.n	8004804 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80047fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004800:	f7fc fb0a 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 8004804:	bf00      	nop
 8004806:	3770      	adds	r7, #112	; 0x70
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ff4e 	bl	80046ce <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004832:	e002      	b.n	800483a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff ff36 	bl	80046a6 <HAL_UART_RxHalfCpltCallback>
}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b80      	cmp	r3, #128	; 0x80
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b21      	cmp	r3, #33	; 0x21
 8004874:	d108      	bne.n	8004888 <UART_DMAError+0x46>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	f000 f8c2 	bl	8004a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	bf0c      	ite	eq
 8004896:	2301      	moveq	r3, #1
 8004898:	2300      	movne	r3, #0
 800489a:	b2db      	uxtb	r3, r3
 800489c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b22      	cmp	r3, #34	; 0x22
 80048a8:	d108      	bne.n	80048bc <UART_DMAError+0x7a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80048b6:	68b8      	ldr	r0, [r7, #8]
 80048b8:	f000 f8d0 	bl	8004a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f043 0210 	orr.w	r2, r3, #16
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c8:	68b8      	ldr	r0, [r7, #8]
 80048ca:	f7ff fef6 	bl	80046ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b098      	sub	sp, #96	; 0x60
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2222      	movs	r2, #34	; 0x22
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	4a3e      	ldr	r2, [pc, #248]	; (8004a00 <UART_Start_Receive_DMA+0x128>)
 8004906:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <UART_Start_Receive_DMA+0x12c>)
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <UART_Start_Receive_DMA+0x130>)
 8004916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	2200      	movs	r2, #0
 800491e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	f7fe f8b0 	bl	8002a9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	65bb      	str	r3, [r7, #88]	; 0x58
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800497a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004980:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e5      	bne.n	800495a <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	657b      	str	r3, [r7, #84]	; 0x54
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80049b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	617b      	str	r3, [r7, #20]
   return(result);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d8:	653b      	str	r3, [r7, #80]	; 0x50
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049e2:	627a      	str	r2, [r7, #36]	; 0x24
 80049e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6a39      	ldr	r1, [r7, #32]
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3760      	adds	r7, #96	; 0x60
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	080046e7 	.word	0x080046e7
 8004a04:	0800480d 	.word	0x0800480d
 8004a08:	08004843 	.word	0x08004843

08004a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	330c      	adds	r3, #12
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	61ba      	str	r2, [r7, #24]
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004a50:	bf00      	nop
 8004a52:	3724      	adds	r7, #36	; 0x24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b095      	sub	sp, #84	; 0x54
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a84:	643a      	str	r2, [r7, #64]	; 0x40
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 0310 	bic.w	r3, r3, #16
 8004aea:	647b      	str	r3, [r7, #68]	; 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af4:	61ba      	str	r2, [r7, #24]
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b16:	bf00      	nop
 8004b18:	3754      	adds	r7, #84	; 0x54
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	b09f      	sub	sp, #124	; 0x7c
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3a:	68d9      	ldr	r1, [r3, #12]
 8004b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	ea40 0301 	orr.w	r3, r0, r1
 8004b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b68:	f021 010c 	bic.w	r1, r1, #12
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b72:	430b      	orrs	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	6999      	ldr	r1, [r3, #24]
 8004b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	ea40 0301 	orr.w	r3, r0, r1
 8004b8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4bc5      	ldr	r3, [pc, #788]	; (8004ea8 <UART_SetConfig+0x384>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d004      	beq.n	8004ba2 <UART_SetConfig+0x7e>
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4bc3      	ldr	r3, [pc, #780]	; (8004eac <UART_SetConfig+0x388>)
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d103      	bne.n	8004baa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ba2:	f7ff f86d 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8004ba6:	6778      	str	r0, [r7, #116]	; 0x74
 8004ba8:	e002      	b.n	8004bb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004baa:	f7ff f855 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8004bae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb8:	f040 80b6 	bne.w	8004d28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbe:	461c      	mov	r4, r3
 8004bc0:	f04f 0500 	mov.w	r5, #0
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	462b      	mov	r3, r5
 8004bc8:	1891      	adds	r1, r2, r2
 8004bca:	6439      	str	r1, [r7, #64]	; 0x40
 8004bcc:	415b      	adcs	r3, r3
 8004bce:	647b      	str	r3, [r7, #68]	; 0x44
 8004bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bd4:	1912      	adds	r2, r2, r4
 8004bd6:	eb45 0303 	adc.w	r3, r5, r3
 8004bda:	f04f 0000 	mov.w	r0, #0
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	00d9      	lsls	r1, r3, #3
 8004be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004be8:	00d0      	lsls	r0, r2, #3
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	1911      	adds	r1, r2, r4
 8004bf0:	6639      	str	r1, [r7, #96]	; 0x60
 8004bf2:	416b      	adcs	r3, r5
 8004bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	1891      	adds	r1, r2, r2
 8004c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c04:	415b      	adcs	r3, r3
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c10:	f7fb faec 	bl	80001ec <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4ba5      	ldr	r3, [pc, #660]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011e      	lsls	r6, r3, #4
 8004c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c24:	461c      	mov	r4, r3
 8004c26:	f04f 0500 	mov.w	r5, #0
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	6339      	str	r1, [r7, #48]	; 0x30
 8004c32:	415b      	adcs	r3, r3
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
 8004c36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c3a:	1912      	adds	r2, r2, r4
 8004c3c:	eb45 0303 	adc.w	r3, r5, r3
 8004c40:	f04f 0000 	mov.w	r0, #0
 8004c44:	f04f 0100 	mov.w	r1, #0
 8004c48:	00d9      	lsls	r1, r3, #3
 8004c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c4e:	00d0      	lsls	r0, r2, #3
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	1911      	adds	r1, r2, r4
 8004c56:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c58:	416b      	adcs	r3, r5
 8004c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c76:	f7fb fab9 	bl	80001ec <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b8c      	ldr	r3, [pc, #560]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	; 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	3332      	adds	r3, #50	; 0x32
 8004c92:	4a87      	ldr	r2, [pc, #540]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca0:	441e      	add	r6, r3
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	1894      	adds	r4, r2, r2
 8004cb0:	623c      	str	r4, [r7, #32]
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cba:	1812      	adds	r2, r2, r0
 8004cbc:	eb41 0303 	adc.w	r3, r1, r3
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	f04f 0500 	mov.w	r5, #0
 8004cc8:	00dd      	lsls	r5, r3, #3
 8004cca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cce:	00d4      	lsls	r4, r2, #3
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	1814      	adds	r4, r2, r0
 8004cd6:	653c      	str	r4, [r7, #80]	; 0x50
 8004cd8:	414b      	adcs	r3, r1
 8004cda:	657b      	str	r3, [r7, #84]	; 0x54
 8004cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	61b9      	str	r1, [r7, #24]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004cf6:	f7fb fa79 	bl	80001ec <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004d00:	fba3 1302 	umull	r1, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	2164      	movs	r1, #100	; 0x64
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3332      	adds	r3, #50	; 0x32
 8004d12:	4a67      	ldr	r2, [pc, #412]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	f003 0207 	and.w	r2, r3, #7
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4432      	add	r2, r6
 8004d24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d26:	e0b9      	b.n	8004e9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	f04f 0500 	mov.w	r5, #0
 8004d30:	4622      	mov	r2, r4
 8004d32:	462b      	mov	r3, r5
 8004d34:	1891      	adds	r1, r2, r2
 8004d36:	6139      	str	r1, [r7, #16]
 8004d38:	415b      	adcs	r3, r3
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d40:	1912      	adds	r2, r2, r4
 8004d42:	eb45 0303 	adc.w	r3, r5, r3
 8004d46:	f04f 0000 	mov.w	r0, #0
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	00d9      	lsls	r1, r3, #3
 8004d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d54:	00d0      	lsls	r0, r2, #3
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	eb12 0804 	adds.w	r8, r2, r4
 8004d5e:	eb43 0905 	adc.w	r9, r3, r5
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f04f 0100 	mov.w	r1, #0
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	008b      	lsls	r3, r1, #2
 8004d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d7a:	0082      	lsls	r2, r0, #2
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4649      	mov	r1, r9
 8004d80:	f7fb fa34 	bl	80001ec <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	011e      	lsls	r6, r3, #4
 8004d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d94:	4618      	mov	r0, r3
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	1894      	adds	r4, r2, r2
 8004da0:	60bc      	str	r4, [r7, #8]
 8004da2:	415b      	adcs	r3, r3
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004daa:	1812      	adds	r2, r2, r0
 8004dac:	eb41 0303 	adc.w	r3, r1, r3
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	00dd      	lsls	r5, r3, #3
 8004dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dbe:	00d4      	lsls	r4, r2, #3
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	1814      	adds	r4, r2, r0
 8004dc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004dc8:	414b      	adcs	r3, r1
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004de4:	0082      	lsls	r2, r0, #2
 8004de6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dea:	f7fb f9ff 	bl	80001ec <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4b2f      	ldr	r3, [pc, #188]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004df4:	fba3 1302 	umull	r1, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	3332      	adds	r3, #50	; 0x32
 8004e06:	4a2a      	ldr	r2, [pc, #168]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e12:	441e      	add	r6, r3
 8004e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e16:	4618      	mov	r0, r3
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	1894      	adds	r4, r2, r2
 8004e22:	603c      	str	r4, [r7, #0]
 8004e24:	415b      	adcs	r3, r3
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2c:	1812      	adds	r2, r2, r0
 8004e2e:	eb41 0303 	adc.w	r3, r1, r3
 8004e32:	f04f 0400 	mov.w	r4, #0
 8004e36:	f04f 0500 	mov.w	r5, #0
 8004e3a:	00dd      	lsls	r5, r3, #3
 8004e3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e40:	00d4      	lsls	r4, r2, #3
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	eb12 0a00 	adds.w	sl, r2, r0
 8004e4a:	eb43 0b01 	adc.w	fp, r3, r1
 8004e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	008b      	lsls	r3, r1, #2
 8004e62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e66:	0082      	lsls	r2, r0, #2
 8004e68:	4650      	mov	r0, sl
 8004e6a:	4659      	mov	r1, fp
 8004e6c:	f7fb f9be 	bl	80001ec <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004e76:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2164      	movs	r1, #100	; 0x64
 8004e7e:	fb01 f303 	mul.w	r3, r1, r3
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	3332      	adds	r3, #50	; 0x32
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <UART_SetConfig+0x38c>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4432      	add	r2, r6
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	377c      	adds	r7, #124	; 0x7c
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40011000 	.word	0x40011000
 8004eac:	40011400 	.word	0x40011400
 8004eb0:	51eb851f 	.word	0x51eb851f

08004eb4 <__libc_init_array>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4d0d      	ldr	r5, [pc, #52]	; (8004eec <__libc_init_array+0x38>)
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ef0 <__libc_init_array+0x3c>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	42a6      	cmp	r6, r4
 8004ec2:	d109      	bne.n	8004ed8 <__libc_init_array+0x24>
 8004ec4:	4d0b      	ldr	r5, [pc, #44]	; (8004ef4 <__libc_init_array+0x40>)
 8004ec6:	4c0c      	ldr	r4, [pc, #48]	; (8004ef8 <__libc_init_array+0x44>)
 8004ec8:	f000 f82e 	bl	8004f28 <_init>
 8004ecc:	1b64      	subs	r4, r4, r5
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	42a6      	cmp	r6, r4
 8004ed4:	d105      	bne.n	8004ee2 <__libc_init_array+0x2e>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004edc:	4798      	blx	r3
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__libc_init_array+0xc>
 8004ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee6:	4798      	blx	r3
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7f2      	b.n	8004ed2 <__libc_init_array+0x1e>
 8004eec:	08004f68 	.word	0x08004f68
 8004ef0:	08004f68 	.word	0x08004f68
 8004ef4:	08004f68 	.word	0x08004f68
 8004ef8:	08004f6c 	.word	0x08004f6c

08004efc <memcpy>:
 8004efc:	440a      	add	r2, r1
 8004efe:	4291      	cmp	r1, r2
 8004f00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f04:	d100      	bne.n	8004f08 <memcpy+0xc>
 8004f06:	4770      	bx	lr
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f12:	4291      	cmp	r1, r2
 8004f14:	d1f9      	bne.n	8004f0a <memcpy+0xe>
 8004f16:	bd10      	pop	{r4, pc}

08004f18 <memset>:
 8004f18:	4402      	add	r2, r0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <memset+0xa>
 8004f20:	4770      	bx	lr
 8004f22:	f803 1b01 	strb.w	r1, [r3], #1
 8004f26:	e7f9      	b.n	8004f1c <memset+0x4>

08004f28 <_init>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr

08004f34 <_fini>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr
